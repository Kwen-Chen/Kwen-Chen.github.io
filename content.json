{"meta":{"title":"CK's Blogs","subtitle":"这里是CK的小世界","description":"描绘昨天，畅想明天","author":"CoderChen","url":"http://ckblogs.cn","root":"/"},"pages":[{"title":"分类","date":"2021-04-13T08:38:06.000Z","updated":"2021-04-13T08:38:39.194Z","comments":true,"path":"categories/index.html","permalink":"http://ckblogs.cn/categories/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-01-04T16:00:00.000Z","updated":"2021-04-14T13:01:56.910Z","comments":true,"path":"about/index.html","permalink":"http://ckblogs.cn/about/index.html","excerpt":"","text":"我是谁？ 我是好人！！"},{"title":"","date":"2021-06-05T04:42:55.960Z","updated":"2021-06-05T04:42:55.960Z","comments":true,"path":"google0b3aa3aa9ec334d1.html","permalink":"http://ckblogs.cn/google0b3aa3aa9ec334d1.html","excerpt":"","text":"google-site-verification: google0b3aa3aa9ec334d1.html"},{"title":"友情链接","date":"2021-04-13T08:38:58.000Z","updated":"2021-04-13T08:39:28.323Z","comments":true,"path":"link/index.html","permalink":"http://ckblogs.cn/link/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-04-13T08:36:52.000Z","updated":"2021-04-13T08:37:50.154Z","comments":true,"path":"tags/index.html","permalink":"http://ckblogs.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Python网络爬虫---虫术(敬请期待)","slug":"Python网络爬虫-虫术-敬请期待","date":"2021-05-28T16:31:51.000Z","updated":"2021-05-28T16:32:06.428Z","comments":true,"path":"2021/05/29/Python网络爬虫-虫术-敬请期待/","link":"","permalink":"http://ckblogs.cn/2021/05/29/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-%E8%99%AB%E6%9C%AF-%E6%95%AC%E8%AF%B7%E6%9C%9F%E5%BE%85/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"机器学习之 Logistic 回归算法及其 Python 实现","slug":"机器学习之-Logistic-回归算法及其-Python-实现","date":"2021-05-28T15:27:29.000Z","updated":"2021-05-28T15:30:28.790Z","comments":true,"path":"2021/05/28/机器学习之-Logistic-回归算法及其-Python-实现/","link":"","permalink":"http://ckblogs.cn/2021/05/28/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B-Logistic-%E5%9B%9E%E5%BD%92%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6-Python-%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"机器学习之 Logistic 回归算法及其 Python 实现 [TOC] 如需要本文所用数据及代码原文件可留言评论。 前言：机器学习分类算法初步 感知器 Frank Rossenblatt 基于 MCP 神经元模型提出第一个感知器学习法则。在此感知器规则中，自学习算法可以自动通过优化得到权重系数，雌蜥属与输入值的乘积决定了神经元是否被激活。在监督学习与分类中，类似算法课用于预测样本所属的类别。 对于一个二分类问题，我们将两个类别记为 1 （正类别）与 -1 （负类别）。定义一个激励函数（activation function）ϕ(z)\\phi(z)ϕ(z) ，它以特定的输入值 xxx 与相应的权值向量 www 的线性组合作为输入，其中，zzz 也称作净输入 (z=w1x1+⋯+wmxm)(z=w_1x_1+\\dots+w_mx_m)(z=w1​x1​+⋯+wm​xm​)。 此时，对于一个特定的样本 x(i)x^{(i)}x(i) 的激励，也就是 ϕ(z)\\phi(z)ϕ(z) 的输出，如果其值大于预设的阈值 θ\\thetaθ ，我们将其划分到 1 类，否则为 -1 类。在感知器算法中，激励函数 ϕ(⋅)\\phi(\\cdot)ϕ(⋅) 是一个简单的分段函数。 ϕ(z)={1若z≥θ−1其他\\phi(z)=\\left\\{ \\begin{aligned} 1 &amp; \\qquad若 z \\ge \\theta \\\\ -1&amp; \\qquad 其他 \\end{aligned} \\right. ϕ(z)={1−1​若z≥θ其他​ MCP 神经元和罗森布拉特阈值感知器的理念就是，通过模拟的方式还原大脑中的单个神经元的工作方式。这样，罗森布拉特感知器最初的规则非常简单，可总结为如下几步： 将权重初始化为零或一个极小的随机数。 迭代所有的训练样本 x(i)x^{(i)}x(i) ，执行如下操作： 计算输出值 y^\\hat{y}y^​ 。 更新权重。 这里的输出值是值通过前面定义的单位阶跃函数预测得出的类标，而这里的权重 www 的更新方式为： wj=wj+Δwjw_j=w_j+\\Delta w_j wj​=wj​+Δwj​ 对于用于更新权重 wjw_jwj​ 的值 Δwj\\Delta w_jΔwj​ ，可通过感知器学习规则计算获得： Δwj=η(y(i)−y^(i))xj(i)\\Delta w_j = \\eta (y^{(i)}-\\hat{y}^{(i)})x_j^{(i)} Δwj​=η(y(i)−y^​(i))xj(i)​ 其中，η\\etaη 为学习速率（一个介于 0 到 1 之间的常数），y(i)y^{(i)}y(i) 为第 iii 个样本的真是类标，y^(i)\\hat{y}^{(i)}y^​(i) 为预测得到的类标。 自适应线性神经元及其学习的收敛性 在 Frank Rosenblatt 提出感知器算法纪念之后，Bernard Widrow 和他的博士生提出了 Adaline 算法，可看作对之前算法的改进。它阐明了代价函数的核心概念，并且对其做出了最小化优化，这是理解 Logistic 回归、支持向量机和后续回归模型的基础。 基于 Adeline 规则的权重更新是通过一个连续的线性激励函数来完成的，而不像感知器那样使用单位阶跃函数，这是二者的主要区别。 线性激励函数在更新权重同时，我们使用量化器对类标进行预测，量化器与前面提到的单位阶跃函数类似。 梯度下降法 机器学习中监督学习算法核心在于定义一个待优化的目标函数，这个目标函数通常是需要我们做最小化处理的代价函数。在 Adaline 中，我们可以将代价函数 JJJ 定义为通过模型得到的输出与实际类标之间的误差平方和： J(w)=12∑i(y(i)−ϕ(z(i)))2J(w) = \\cfrac{1}{2}\\sum\\limits_i (y^{(i)}-\\phi(z^{(i)}))^2 J(w)=21​i∑​(y(i)−ϕ(z(i)))2 与单位阶跃函数相比，这种连续的线性激励函数的主要优点在于：其代价函数是可导的。另一个优点是：他是一个凸函数；这样，我们通过简单、高效的梯度下降优化算法；来得到权重。在每次迭代的过程中，根据给定的学习所率和梯度斜率，能够确定每次移动的步幅，我们按照步幅沿着梯度方向前进一步，直到获得一个局部或全局最小值： $$ w:=w+\\Delta w \\\\ \\Delta w = -\\eta \\cfrac{\\partial J}{\\partial w_i} $$ 为了计算代价函数的梯度，我们需要计算代价函数相对于每个权重$w_j$ 的偏导$\\cfrac{\\partial J}{\\partial w_i}$ 这样我们可以把 $w_j$ 的更新写作： $$ \\Delta w_j=-\\eta\\cfrac{\\partial J}{\\partial w_i}=\\mu\\sum\\limits_i(y^{(i)}-\\phi(z^{(i)}))x_j^{(i)} $$ 逻辑斯蒂（Logistic）回归 基本模型介绍 前言中提到的感知器是机器学习中优雅医用的一个入门级算 法，不过其最大的缺点在于：在样本不是完全线性可分的情况下，它永远不会收敛。为了提高分类效率，可以使用 Logistic 回归模型。注意：Logistic 回归模型是一个分类模型，而不是回归模型。 Logistic 回归是针对线性可分问题的一种易于实现且性能优异的分类模型。 设置激励函数：sigmoid 函数 ϕ(z)=11+e−z\\phi(z)=\\cfrac{1}{1+e^{-z}} ϕ(z)=1+e−z1​ 它的函数图像是这样的： 可以看到，当 zzz 趋向于无穷大时，ϕ(z)\\phi(z)ϕ(z) 趋近于 1，这是由于 e−ze^{-z}e−z 在 zzz 值极大的情况下变得极小。当zzz 趋向于负无穷时，ϕ(z)\\phi(z)ϕ(z) 趋近于 0，这是由于此时分母越来越大的结果。由此可以得出结论： sigmoid 函数以实数值作为输入并将其映射到了 [0,1][0,1][0,1] 区间，其拐点位于 ϕ(z)=0.5\\phi(z)=0.5ϕ(z)=0.5 处。 将 logistic 回归模型与上文中介绍的 Adaline 模型联系起来。在 Adaline 中，我们使用恒等函数 ϕ(z)=z\\phi(z) = zϕ(z)=z 作为激励函数。而在 logistic 回归模型中，只是简单地将前面提到的 sigmoid 函数作为激励函数，如下图所示： 在给定特征 x 及其权重 w 的权重情况下，sigmoid 函数的输出给出了特定的样本 x 所属的概率 ϕ(z)=P(y=1∣x;w)\\phi(z)=P(y=1|x;w)ϕ(z)=P(y=1∣x;w)。预测得到的概率可以通过量化器（单位跃阶函数）简单地转化为二元输出： y^={1若ϕ(z)≥0.50其他\\hat{y}=\\left\\{ \\begin{aligned} 1 &amp; \\qquad若 \\phi(z)\\ge 0.5 \\\\ 0&amp; \\qquad 其他 \\end{aligned} \\right. y^​={10​若ϕ(z)≥0.5其他​ 对照前面给出的 sigmoid 函数图像，它其实相当于： y^={1若z≥0.00其他\\hat{y}=\\left\\{ \\begin{aligned} 1 &amp; \\qquad若 z\\ge 0.0 \\\\ 0&amp; \\qquad 其他 \\end{aligned} \\right. y^​={10​若z≥0.0其他​ 通过代价函数获得权重 在 Adaline 分类模型中，我们定义其代价函数为误差平方和，根据此代价函数并运用梯度下降法更新权重，我们在构建 logistic 回归模型时，首先定义一个最大似然函数 LLL，其计算公式如下： L(w)=P(y∣x;w)=∏i=1nP(y(i)∣x(i);w)=(ϕ(z(i)))y(i)(1−ϕ(x(i)))1−y(i)L(w)=P(y|x;w)=\\prod_{i=1}^nP(y^{(i)}|x^{(i)};w)=\\left(\\phi\\left(z^{(i)}\\right)\\right)^{y^{(i)}}\\left(1-\\phi\\left(x^{(i)}\\right)\\right)^{1-y^{(i)}} L(w)=P(y∣x;w)=i=1∏n​P(y(i)∣x(i);w)=(ϕ(z(i)))y(i)(1−ϕ(x(i)))1−y(i) 作对数化处理后： ln⁡L(w)=∑i=1n(y(i)ln⁡[ϕ(z(i))]+(1−y(i))ln⁡[1−ϕ(z(i))])\\ln L(w)=\\sum_{i=1}^{n}\\left(y^{(i)} \\ln \\left[\\phi\\left(z^{(i)}\\right)\\right]+\\left(1-y^{(i)}\\right) \\ln \\left[1-\\phi\\left(z^{(i)}\\right)\\right]\\right) lnL(w)=i=1∑n​(y(i)ln[ϕ(z(i))]+(1−y(i))ln[1−ϕ(z(i))]) 根据前文提到的梯度下降法做代价函数的最小化处理，求解权重。 logistic 的 Python 实现 实现方式一：不使用机器学习第三方库 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136# -*- coding:utf-8 -*-&quot;&quot;&quot;@author:Lisa@file:logisticRegression.py@note:logistic回归@time:2018/7/11 0011下午 10:45&quot;&quot;&quot;import numpy as npimport matplotlib.pyplot as pltdef loadDataSet(): &quot;&quot;&quot; 函数：加载数据集 &quot;&quot;&quot; dataMat = [] # 列表list labelMat = [] txt = open(&#x27;testSet.txt&#x27;) for line in txt.readlines(): lineArr = line.strip().split() # strip():返回一个带前导和尾随空格的字符串的副本 # split():默认以空格为分隔符，空字符串从结果中删除 dataMat.append([1.0, float(lineArr[0]), float(lineArr[1])]) # 将二维特征扩展到三维，第一维都设置为1.0 labelMat.append(int(lineArr[2])) return dataMat, labelMat&quot;&quot;&quot;函数：sigmoid函数&quot;&quot;&quot;def sigmoid(z): return 1.0/(1+np.exp(-z))&quot;&quot;&quot;函数：梯度上升算法&quot;&quot;&quot;def gradAscent(dataMat, labelMat): dataSet = np.mat(dataMat) # m*n labelSet = np.mat(labelMat).transpose() # 1*m-&gt;m*1 m, n = np.shape(dataSet) # m*n: m个样本，n个特征 alpha = 0.001 # 学习步长 maxCycles = 500 # 最大迭代次数 weights = np.ones((n, 1)) for i in range(maxCycles): y = sigmoid(dataSet * weights) # 预测值 error = labelSet - y weights = weights + alpha * dataSet.transpose()*error #print(type(weights)) return weights.getA(),weights ##getA():将Mat转化为ndarray,因为mat不能用index&quot;&quot;&quot;函数：随机梯度上升算法0.0改进：每次用一个样本来更新回归系数&quot;&quot;&quot;def stocGradAscent0(dataMat,labelMat): m, n = np.shape(dataMat) # m*n: m个样本，n个特征 alpha = 0.001 # 学习步长 maxCycles=500 weights = np.ones(n) for cycle in range(maxCycles): for i in range(m): y = sigmoid(sum(dataMat[i] * weights) ) # 预测值 error = labelMat[i] - y weights = weights + alpha * error* dataMat[i] # print(type(weights)) return weights&quot;&quot;&quot;函数：改进的随机梯度上升法1.0改进：1.alpha随着迭代次数不断减小，但永远不会减小到0 2.通过随机选取样本来更新回归系数&quot;&quot;&quot;def stocGradAscent1(dataMat,labelMat): m, n = np.shape(dataMat) # m*n: m个样本，n个特征 maxCycles = 150 weights = np.ones(n) for cycle in range(maxCycles): dataIndex=list( range(m)) for i in range(m): alpha = 4 / (1.0 + cycle + i) + 0.01 # 学习步长 randIndex=int(np.random.uniform(0,len(dataIndex) )) #随机选取样本 y = sigmoid(sum(dataMat[randIndex] * weights )) # 预测值 error = labelMat[randIndex] - y weights = weights + alpha * error * dataMat[randIndex] del(dataIndex[randIndex]) # print(type(weights)) return weights&quot;&quot;&quot;函数：画出决策边界&quot;&quot;&quot;def plotBestFit(weights): dataMat, labelMat = loadDataSet() dataArr=np.array(dataMat) m,n=np.shape(dataArr) x1=[] #x1,y1:类别为1的特征 x2=[] #x2,y2:类别为2的特征 y1=[] y2=[] for i in range(m): if (labelMat[i])==1: x1.append(dataArr[i,1]) y1.append(dataArr[i,2]) else: x2.append(dataArr[i,1]) y2.append(dataArr[i,2]) fig=plt.figure() ax=fig.add_subplot(1,1,1) ax.scatter(x1,y1,s=30,c=&#x27;red&#x27;,marker=&#x27;s&#x27;) ax.scatter(x2,y2,s=30,c=&#x27;green&#x27;) #画出拟合直线 x=np.arange(-3.0, 3.0, 0.1) y=(-weights[0]-weights[1]*x)/weights[2] #直线满足关系：0=w0*1.0+w1*x1+w2*x2 ax.plot(x,y) plt.xlabel(&#x27;X1&#x27;) plt.ylabel(&#x27;X2&#x27;) plt.show()def main(): dataMat,labelMat=loadDataSet() weights = gradAscent(dataMat,labelMat)[0] weights = stocGradAscent0(np.array(dataMat), labelMat) weights = stocGradAscent1(np.array(dataMat), labelMat) plotBestFit(weights)if __name__ == &#x27;__main__&#x27;: main() 运行结果： 实现方式二：使用 sklearn 模块 模块介绍： sklearn.linear_model.LogisticRegression官方API： 官方API：http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html 1class sklearn.linear_model.LogisticRegression (penalty=&#x27;l2&#x27;, dual=False, tol=0.0001, C=1.0,fit_intercept=True, intercept_scaling=1, class_weight=None, random_state=None,solver=&#x27;liblinear&#x27;, max_iter=100, multi_class=&#x27;ovr&#x27;, verbose=0,warm_start=False, n_jobs=1) 参数说明： penalty： 惩罚项，可为’l1’ or ‘l2’。‘netton-cg’, ‘sag’, ‘lbfgs’只支持’l2’。‘l1’正则化的损失函数不是连续可导的，而’netton-cg’, ‘sag’, 'lbfgs’这三种算法需要损失函数的一阶或二阶连续可导。调参时如果主要是为了解决过拟合，选择’l2’正则化就够了。若选择’l2’正则化还是过拟合，可考虑’l1’正则化。若模型特征非常多，希望一些不重要的特征系数归零，从而让模型系数化的话，可用’l1’正则化。 dual：选择目标函数为原始形式还是对偶形式。 将原始函数等价转化为一个新函数，该新函数称为对偶函数。对偶函数比原始函数更易于优化。 tol： 优化算法停止的条件。当迭代前后的函数差值小于等于tol时就停止。 C： 正则化系数。其越小，正则化越强。 fit_intercept： 选择逻辑回归模型中是否会有常数项b intercept_scaling： 仅在正则化项为&quot;liblinear&quot;，且fit_intercept设置为True时有用。 class_weight： 用于标示分类模型中各种类型的权重，{class_label: weight} or ‘balanced’。 ‘balanced’：类库根据训练样本量来计算权重。某种类型的样本量越多，则权重越低。 若误分类代价很高，比如对合法用户和非法用户进行分类，可适当提高非法用户的权重。 样本高度失衡的。如合法用户9995条，非法用户5条，可选择’balanced’，让类库自动提高非法用户样本的权重。 random_state： 随机数种子。 solver： 逻辑回归损失函数的优化方法。 **‘liblinear’：**使用坐标轴下降法来迭代优化损失函数。 ‘lbfgs’： 拟牛顿法的一种。利用损失函数二阶导数矩阵即海森矩阵来迭代优化损失函数。 **‘newton-cg：’**牛顿法的一种。同上。 **‘sag’：**随机平均梯度下降。每次迭代仅仅用一部分的样本来计算梯度，适合于样本数据多的时候。 多元逻辑回归有OvR(one-vs-rest)和MvM(many-vs-many)两种，而MvM一般比OvR分类相对准确一些。但是，'liblinear’只支持OvR。 max_iter： 优化算法的迭代次数。 multi_class： ‘ovr’ or ‘multinomial’。'multinomial’即为MvM。 1. 若是二元逻辑回归，二者区别不大。 2. 对于MvM，若模型有T类，每次在所有的T类样本里面选择两类样本出来，把所有输出为该两类的样本放在一起，进行二元回归，得到模型参数，一共需要T(T-1)/2次分类。 verbose： 控制是否 print 训练过程。 warm_start： 是否热启动，如果是，则下一次训练是以追加树的形式进行（重新使用上一次的调用作为初始化），bool：热启动，False：默认值 n_jobs： 用cpu的几个核来跑程序。 demo 1234567891011121314151617181920212223242526272829303132333435363738394041# -*- coding:utf-8 -*-&quot;&quot;&quot;@author:Lisa@file:sklearn_horse_colic.py@note:利用sklearn的LR方法实现 疝气马预测@time:2018/7/13 0013上午 11:30@reference:&quot;&quot;&quot;from sklearn.linear_model import LogisticRegression&quot;&quot;&quot;函数：疝气预测&quot;&quot;&quot;def colicTest(): trainData=open(&#x27;data\\horseColicTraining.txt&#x27;) testData = open(&#x27;data\\horseColicTest.txt&#x27;) trainSet=[] trainLabel=[] for line in trainData.readlines(): curLine=line.strip().split(&#x27;\\t&#x27;) lineArr=[] for i in range(21): lineArr.append(float (curLine[i])) trainSet.append(lineArr) trainLabel.append(float(curLine[21])) testSet = [] testLabel = [] for line in testData.readlines(): curLine=line.strip().split(&#x27;\\t&#x27;) lineArr=[] for i in range(21): lineArr.append(float (curLine[i])) testSet.append(lineArr) testLabel.append(float(curLine[21])) #分类器 classifier = LogisticRegression(solver=&#x27;sag&#x27;, max_iter=5000).fit(trainSet, trainLabel) test_accurcy = classifier.score(testSet, testLabel) * 100 print(&quot;the accurate rate is: %f&quot; % test_accurcy) 运行结果： the accurate rate is: 73.134328 实现方式三：使用 Pytorch 模块 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990import torchimport torch.nn as nnimport matplotlib.pyplot as pltimport numpy as nptorch.manual_seed(10) # ============================ step 1/5 生成数据 ============================sample_nums = 100mean_value = 1.7bias = 1n_data = torch.ones(sample_nums, 2)x0 = torch.normal(mean_value * n_data, 1) + bias # 类别0 数据 shape=(100, 2)y0 = torch.zeros(sample_nums) # 类别0 标签 shape=(100, 1)x1 = torch.normal(-mean_value * n_data, 1) + bias # 类别1 数据 shape=(100, 2)y1 = torch.ones(sample_nums) # 类别1 标签 shape=(100, 1)train_x = torch.cat((x0, x1), 0)train_y = torch.cat((y0, y1), 0) # ============================ step 2/5 选择模型 ============================class LR(nn.Module): def __init__(self): super(LR, self).__init__() self.features = nn.Linear(2, 1) self.sigmoid = nn.Sigmoid() def forward(self, x): x = self.features(x) x = self.sigmoid(x) return x lr_net = LR() # 实例化逻辑回归模型 # ============================ step 3/5 选择损失函数 ============================loss_fn = nn.BCELoss() # ============================ step 4/5 选择优化器 ============================lr = 0.01 # 学习率optimizer = torch.optim.SGD(lr_net.parameters(), lr=lr, momentum=0.9) # ============================ step 5/5 模型训练 ============================for iteration in range(1000): # 前向传播 y_pred = lr_net(train_x) # 计算 loss loss = loss_fn(y_pred.squeeze(), train_y) # 反向传播 loss.backward() # 更新参数 optimizer.step() # 清空梯度 optimizer.zero_grad() # 绘图 if iteration % 20 == 0: mask = y_pred.ge(0.5).float().squeeze() # 以0.5为阈值进行分类 correct = (mask == train_y).sum() # 计算正确预测的样本个数 acc = correct.item() / train_y.size(0) # 计算分类准确率 plt.scatter(x0.data.numpy()[:, 0], x0.data.numpy()[:, 1], c=&#x27;r&#x27;, label=&#x27;class 0&#x27;) plt.scatter(x1.data.numpy()[:, 0], x1.data.numpy()[:, 1], c=&#x27;b&#x27;, label=&#x27;class 1&#x27;) w0, w1 = lr_net.features.weight[0] w0, w1 = float(w0.item()), float(w1.item()) plot_b = float(lr_net.features.bias[0].item()) plot_x = np.arange(-6, 6, 0.1) plot_y = (-w0 * plot_x - plot_b) / w1 plt.xlim(-5, 7) plt.ylim(-7, 7) plt.plot(plot_x, plot_y) plt.text(-5, 5, &#x27;Loss=%.4f&#x27; % loss.data.numpy(), fontdict=&#123;&#x27;size&#x27;: 20, &#x27;color&#x27;: &#x27;red&#x27;&#125;) plt.title(&quot;Iteration: &#123;&#125;\\nw0:&#123;:.2f&#125; w1:&#123;:.2f&#125; b: &#123;:.2f&#125; accuracy:&#123;:.2%&#125;&quot;.format(iteration, w0, w1, plot_b, acc)) plt.legend() plt.show() plt.pause(0.5) if acc &gt; 0.99: break 参考博文: logistic回归原理与实现 Sklearn-LogisticRegression逻辑回归 sklearn 官方API Pytorch：通过pytorch实现逻辑回归","categories":[{"name":"数学建模","slug":"数学建模","permalink":"http://ckblogs.cn/categories/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"}],"tags":[{"name":"数学建模","slug":"数学建模","permalink":"http://ckblogs.cn/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"},{"name":"Python","slug":"Python","permalink":"http://ckblogs.cn/tags/Python/"},{"name":"机器学习","slug":"机器学习","permalink":"http://ckblogs.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}]},{"title":"基于深度优先搜索回溯法的人狼羊菜过河模型","slug":"狼羊菜过河模型","date":"2021-05-05T14:44:12.000Z","updated":"2021-05-28T15:56:03.301Z","comments":true,"path":"2021/05/05/狼羊菜过河模型/","link":"","permalink":"http://ckblogs.cn/2021/05/05/%E7%8B%BC%E7%BE%8A%E8%8F%9C%E8%BF%87%E6%B2%B3%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"基于深度优先搜索回溯法的人狼羊菜过河模型 本文介绍一个农夫过河的小模型，算法 Python 实现，感觉还挺有趣的，因原为笔者课程作业论文改版而来，所以文章内容比起其他博客文章可能会比较严肃与严谨。期待与你的思维碰撞。 摘要 本文介绍了一种合理规划农夫携带狼、羊、菜安全过河问题。对问题合理分析，将人、狼、羊、菜四者的某时刻状态量化为一向量，基于此结构建立安全位置状态集合，与安全运输状态集合，存储运输过程中可能的位置状态与运输状态。以初始状态向量为起点，采用回溯法，深度优先遍历所有可行路径，将符合题目条件并未重复的可行路径添入历史路径集合中，并记录此时的位置状态。递归至搜索到终止状态集合，输出所有历史位置状态集合，即为一条可行方案。回溯弹出，即可搜寻到所有可行路径。并根据所搜寻到的可行路径输出最短路径。 通过上述模型及算法，本文基于 Python 语言，实现模型求解最终找到此问题唯二解： 农夫带羊过河→\\rightarrow→农夫返回→\\rightarrow→农夫带狼过河→\\rightarrow→农夫带羊返回→\\rightarrow→农夫带菜过河→\\rightarrow→农夫返回→\\rightarrow→农夫带羊过河 农夫带羊过河→\\rightarrow→农夫返回→\\rightarrow→农夫带菜过河→\\rightarrow→农夫带羊返回→\\rightarrow→农夫带狼过河→\\rightarrow→农夫返回→\\rightarrow→农夫带羊过河 为检验模型的正确性与普适性，本文假定当狼、羊同时存在时（农夫不存在），狼不会吃羊。即添加两安全位置状态向量。得到更改后问题的唯八解（见正文），并且所得到的最短路径更少。验证模型准确性高，具有普适性。拓展到日常生活的规划问题时，具有一定的参考意义。 关键字: 回溯法 深度优先搜索DFS 空间状态树 Python 问题重述 问题描述 本文致力于解决一位农夫的过河问题。在此问题中，一位农夫，携带狼、羊、菜，准备过河，在只有一艘船只且每次过河农夫只能携带狼、羊、菜其中一件个体的前提下，保证农夫与每件个体安全渡河。而在过河过程中，由于缺少农夫的看管，当狼与羊单独在一岸时，狼可以吃羊使得渡河失败；由于缺少农夫的看管，当羊与菜单独在一岸时，羊可以吃菜使得渡河失败。如何让狼、羊、菜同时保证安全的前提下，让农夫顺利过河，取决于农夫每次过河时所携带的个体。本文建立合适的模型，并选择合适的算法，寻找所有的渡河决策。 这个问题属实离谱，《养狼的农夫》，而且农夫还没有绳子可以把羊和狼拴起来，哎大家别较真。 问题要求 在此问题中的求解中，需要满足下列条件： 保证狼与羊不单独在同一岸边； 保证羊与菜不单独在同一岸边； 农夫每次运输只能携带狼、羊、菜中的一位，或者不携带其中的任何一位； 决策需要在有限次完成，并保证前后互不重复。 在保证狼、羊、菜全部安全的前提下，建立合适模型，并选择合适算法求解，找出决策变化规律。寻找到所有有限次符合要求的农夫渡河决策。 问题分析 在此问题中，由于对狼、羊、菜相关约束条件，为保证每一件个体的安全，不单独将狼与羊或羊与菜放在同一岸边，对于这一人、狼、羊、菜四者的所在位置状态的约束，考虑河岸的任意一边，通过穷举，不难想出，各河岸有且仅有下面的十种安全位置状态（如下表所示），由对称性，另一边的安全位置状态与此相同。 在此问题中，由于农夫和小船运输限制，每次渡河农夫必须在船上，并且农夫可以选择携带狼、羊、菜中的任何一个，当然农夫可以选择不携带其中的任何一个，而单独过河。在上述情况中，通过穷尽，不难想出，每次渡河，从河的一边运输到另外一边，在运输船中，有且仅有下面四种运输状态（如下表所示），由对称性，从河的另一岸到此岸的运输状态相同。 问题的起始状态为：人、狼、羊、菜在此岸，而本文所要寻找的决策便是由一系列的人狼羊菜安全运输状态组成，使最终的人狼羊菜位置状态为：人、狼、羊、菜在彼岸。 注：其中√\\surd√表示存在，◯\\bigcirc◯表示不存在。 为合理量化模型状态，本文采用二进制向量数据结构，四位向量数据因子分布存储人、狼、羊、菜的位置状态与运输状态： 位置状态：每个个体所处位置状态仅有两种情况，在此岸与未在此岸，设定 1 为在此岸， 0 为位未在此岸； 运输状态：每个个体所处运输状态仅有两种情况，被运输与未被运输，设定 1 为被运输， 0 为未被运输。 搜寻可行路径，使得每次状态向量均为安全状态向量。状态起点为(1,1,1,1)(1,1,1,1)(1,1,1,1)，当搜寻至状态终点(0,0,0,0)(0,0,0,0)(0,0,0,0)时，成功完成渡河，即为所搜索到的一条运输策略。记录运输策略集合中所包含的状态向量个数。则最短路径即为当包含的状态向量个数最少时的最优解。 ## 名词解释与模型假设 名词解释 本文部分所用具体符号如下表所示： 符号表示 说明 集合Sk{k=1,2,...,10}S_k\\quad \\{k=1,2,...,10\\}Sk​{k=1,2,...,10} 人狼羊菜安全位置状态集合 集合Mk{k=1,2,3,4}M_k\\quad \\{k=1,2,3,4\\}Mk​{k=1,2,3,4} 人狼羊菜安全运输状态集合 集合Gk{k=1,2,...,n}G_k \\quad \\{k=1,2,...,n\\}Gk​{k=1,2,...,n} 历史位置状态集合 集合Hk{k=1,2,...,m}H_k \\quad \\{k=1,2,...,m\\}Hk​{k=1,2,...,m} 历史运输状态集合 模型假设 为使所建立模型更加合理，避免异常情况干扰模型结果，在满足客观条件下，设定下面的模型假设： 运输过程，不因时间或利益成本而丢弃或放弃任意一件个体； 当狼、羊单独存在时，假设二者不会自主逃跑或丢失； 每次运输过程除运输个体外，环境条件完全相同，不考虑风浪及农夫体力对运输的影响； 农夫所养之狼并不会出现恶意攻击农夫或不服从农夫命令的行为。 模型的建立与求解 模型的建立 为合理量化模型状态，本文采用二进制向量数据结构，四位向量数据因子分布存储人、狼、羊、菜的位置状态与运输状态： 位置状态：每个个体所处位置状态仅有两种情况，在此岸与未在此岸，设定 1 为在此岸， 0 为位未在此岸； 运输状态：每个个体所处运输状态仅有两种情况，被运输与未被运输，设定 1 为被运输， 0 为未被运输。 由此结构，可将安全位置状态集合量化如下： S={(1,1,1,1)(1,1,1,0)(1,1,0,1)(1,0,1,1)(1,0,1,0)(0,0,0,0)(0,0,0,1)(0,0,1,0)(0,1,0,0)(0,1,0,1)S = \\begin{cases} (1, 1, 1, 1)\\quad (1, 1, 1, 0)\\quad (1, 1, 0, 1)\\quad (1, 0, 1, 1)\\quad (1, 0, 1, 0)\\\\ (0, 0, 0, 0)\\quad(0, 0, 0, 1)\\quad (0, 0, 1, 0)\\quad (0, 1, 0, 0)\\quad (0, 1, 0, 1) \\end{cases} S={(1,1,1,1)(1,1,1,0)(1,1,0,1)(1,0,1,1)(1,0,1,0)(0,0,0,0)(0,0,0,1)(0,0,1,0)(0,1,0,0)(0,1,0,1)​ 可将安全运输状态集合量化如下： M={(1,0,0,0)(1,1,0,0)(1,0,1,0)(1,0,0,1)}M = \\{ (1, 0, 0, 0)\\quad (1, 1, 0, 0)\\quad (1, 0, 1, 0)\\quad (1, 0, 0, 1) \\} M={(1,0,0,0)(1,1,0,0)(1,0,1,0)(1,0,0,1)} 由位置状态及运输状态定义可知，满足下面条件： Gk+1=Gk+HkGk,Gk+1∈SHk∈MG_{k+1} = G_{k} + H_{k}\\\\ G_{k},G_{k+1} \\in S\\\\ H_{k} \\in M Gk+1​=Gk​+Hk​Gk​,Gk+1​∈SHk​∈M 其中Gk{k=1,2,...,n}G_k \\quad \\{k=1,2,...,n\\}Gk​{k=1,2,...,n}为历史位置状态集合，存储运输过程中符合条件的个体位置状态，Hk{k=1,2,...,m}H_k \\quad \\{k=1,2,...,m\\}Hk​{k=1,2,...,m}为历史运输状态集合，存储运输过程中符合条件的个体运输状态。并且一定有 m=n−1m = n - 1 m=n−1 由于两种状态向量的特殊关系，对应状态向量因子之间的相加运算符合下列条件： $ 1 + 1 = 0$，在此岸个体被运输去后，位置状态向量为 0，表示已不在此岸； 1+0=11 + 0 = 11+0=1，在此岸个体未被运输后，位置状态向量仍为 1，表示仍在此岸； 0+1=10 + 1 = 10+1=1，未在此岸个体被运输来后，位置状态为 1，表示来到此岸； 0+0=00 + 0 = 00+0=0，未在此岸个体未被运输后，位置状态仍为 0，表示仍未在此岸。 为避免所寻路径重复，需要补充条件： Gk∉Gii&lt;k G_{k} \\notin G_{i} \\qquad i &lt; k Gk​∈/Gi​i&lt;k 所建模型初始位置状态向量：G1=(1,1,1,1)G_1=(1, 1, 1, 1)G1​=(1,1,1,1)，当模型满足上述(1),(2),(3),(4)(1),(2),(3),(4)(1),(2),(3),(4)条件，并且搜寻到目标状态向量：Gn=(0,0,0,0)G_n=(0, 0, 0, 0)Gn​=(0,0,0,0)时，成功完成渡河，所搜索到的运输策略即为 Hk其中k=1,2,...,n−1H_{k}\\qquad \\text{其中}k=1,2,...,n-1 Hk​其中k=1,2,...,n−1 记录m=n−1m=n-1m=n−1，当全部搜索遍历结束后，取到$\\min m $的路径集合即为最短路径方案。 考虑模型数据结构，基于此问题，由于面对同一状态向量下，可能有多个安全运输状态，有多种运输方法策略，本文用空间状态树，存储遍历搜索路径中的可行位置状态，故空间状态树的根节点为(0,0,0,0)(0,0,0,0)(0,0,0,0)，当搜索到叶子节点为(1,1,1,1)(1,1,1,1)(1,1,1,1)时，从根节点到该叶子节点的一条路径便是一条可行路径。 模型的求解 回溯法按深度优先策略搜索问题的解空间树。首先从根节点出发搜索解空间树，当算法搜索至解空间树的某一节点时，先利用剪枝函数判断该节点是否可行（即能得到问题的解）。如果不可行，则跳过对该节点为根的子树的搜索，逐层向其祖先节点回溯；否则，进入该子树，继续按深度优先策略搜索。 具体回溯步骤如下图流程图所示： 回溯法的基本行为是搜索，搜索过程使用剪枝函数来为了避免无效的搜索。剪枝函数包括两类：1. 使用约束函数，剪去不满足约束条件的路径；2.使用限界函数，剪去不能得到最优解的路径。本题中，约束函数在于下面几点： 可行位置状态向量属于安全位置状态向量，可行运输状态向量属于安全运输状态向量； 历史位置状态不重复； 运输时农夫所携带个体与农夫位于同一侧。 问题的关键在于如何定义问题的解空间，转化成树（即解空间树）。解空间树分为两种：子集树和排列树。两种在算法结构和思路上大体相同。 考虑模型的搜索遍历算法，有此问题可以分解，但是又不能得出明确的递归解法，因此本文采用回溯法解决此问题。回溯法的优点在于其程序结构明确，可读性强，易于理解，而且通过对问题的分析可以大大提高运行效率。本文用采回溯法，按照深度优先搜索策略，遍历构建的位置空间状态树，输出得到的所有路径。 求解得到所有可行路径之后，根据可行路径集合中元素个数多少确定路径长短，最短路径即为所含元素最少的路径。 模型求解结果 通过回溯算法求解所建立模型，由程序语言实现（完整代码见附录）后，得到下面对模型的求解结果： 12345方案1:[[1, 1, 1, 1], [0, 1, 0, 1], [1, 1, 0, 1], [0, 0, 0, 1], [1, 0, 1, 1], [0, 0, 1, 0], [1, 0, 1, 0], [0, 0, 0, 0]]方案2:[[1, 1, 1, 1], [0, 1, 0, 1], [1, 1, 0, 1], [0, 1, 0, 0], [1, 1, 1, 0], [0, 0, 1, 0], [1, 0, 1, 0], [0, 0, 0, 0]] 模型检验 为检验模型的正确性与普适性，现假定当狼、羊同时存在时 (农夫不存在 )，狼不会 吃羊。即添加安全位置状态向量 S11=(0,1,1,0),S12=(1,0,0,1)S_{11}=(0,1,1,0), S_{12}=(1,0,0,1)S11​=(0,1,1,0),S12​=(1,0,0,1) 。代入原模型中，利 用回溯算法求解所有符合条件的农夫过河策略，得到下面的求解方案状态向量: 12345678910111213141516171819202122方案1:[[1, 1, 1, 1], [0, 1, 0, 1], [1, 1, 0, 1], [0, 0, 0, 1], [1, 0, 0, 1], [0, 0, 0, 0]]方案2:[[1, 1, 1, 1], [0, 1, 0, 1], [1, 1, 0, 1], [0, 0, 0, 1], [1, 0, 1, 1], [0, 0, 1, 0], [1, 0,1, 0], [0, 0, 0, 0]]方案3:[[1, 1, 1, 1], [0, 1, 0, 1], [1, 1, 0, 1], [0, 1, 0, 0], [1, 1, 1, 0], [0, 0, 1, 0], [1, 0,1, 0], [0, 0, 0, 0]]方案4:[[1, 1, 1, 1], [0, 1, 0, 1], [1, 1, 0, 1], [0, 1, 0, 0], [1, 1, 1, 0], [0, 0, 1, 0], [1, 0,1, 1], [0, 0, 0, 1], [1, 0, 0, 1], [0, 0, 0, 0]]方案5:[[1, 1, 1, 1], [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 1, 0], [1, 0, 1, 0], [0, 0, 0, 0]]方案6:[[1, 1, 1, 1], [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 1, 0], [1, 0, 1, 1], [0, 0, 0, 1], [1, 0,0, 1], [0, 0, 0, 0]]方案7:[[1, 1, 1, 1], [0, 1, 1, 0], [1, 1, 1, 0], [0, 1, 0, 0], [1, 1, 0, 1], [0, 0, 0, 1], [1, 0,0, 1], [0, 0, 0, 0]]方案8:[[1, 1, 1, 1], [0, 1, 1, 0], [1, 1, 1, 0], [0, 1, 0, 0], [1, 1, 0, 1], [0, 0, 0, 1], [1, 0,1, 1], [0, 0, 1, 0], [1, 0, 1, 0], [0, 0, 0, 0]] 得到的最短路径为: 农夫带羊过河 →\\rightarrow→ 农夫返回农夫 →\\rightarrow→ 带狼过河 →\\rightarrow→ 农夫返回 →\\rightarrow→ 农夫带菜过河 农夫带羊过河 →\\rightarrow→ 农夫返回 →\\rightarrow→ 农夫带狼过河 →\\rightarrow→ 农夫返回 →\\rightarrow→ 农夫带菜过河 放宽约束要求后，所得到的合理方案数更多，最优方案所需路径更少。这与实际情况相符合。经检验，本文模型具有较高的普适性，所求方案完整准确，适用于此类约束性规划过河问题，具有较高的实际意义。 这里有点扯淡，因为我也无法说明为啥这就是只有这八种方案 模型评价 模型优点 巧妙地将问题约束条件量化，构造空间状态树的数据结构，使求解结果更加准确全 面。 模型轻便，具有普适性，适于推广到不同的问题中去。 采用回溯法，DFS，提高遍历效率。在分支界限法中，一般用的是 FIFO 或最小耗费其思想是一次性将一个节点的所有子节点求出并将其放入一个待求子节点的队列。通过遍历这个队列（队列在遍历过程中不断增长）完成搜索。而 DFS 的作法则是将每一条合法路径求出后再转而向上求第二条合法路径。而在回溯法中，采用DFS。可以通过约束函数杀死一些节点从而提高算法效率，由于 DFS 是将路径逐一求出的，通过在求路径的过程中杀死节点即可省去求所有子节点所花费的时间。 模型缺点 建模方法单一，对于同一问题没有建立多个模型，无法进行多个模型的分析与比较。 模型初始化需要用户提供所有的安全位置状态集合与安全路径集合，虽简便了算法 的实现，但在使用方面增加了一定的复杂程度。 参考博文 [1] https://blog.csdn.net/ltx06/article/details/24110171 [2] https://www.cnblogs.com/wj033/p/9129984.html [3] https://www.jianshu.com/p/d28b01b3edae [4] https://www.cnblogs.com/steven_oyj/archive/2010/05/22/1741376.html [5] https://wenku.baidu.com/view/9005d511f18583d049645937.html","categories":[{"name":"数学建模","slug":"数学建模","permalink":"http://ckblogs.cn/categories/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"}],"tags":[{"name":"数学建模","slug":"数学建模","permalink":"http://ckblogs.cn/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"},{"name":"小玩意","slug":"小玩意","permalink":"http://ckblogs.cn/tags/%E5%B0%8F%E7%8E%A9%E6%84%8F/"},{"name":"回溯法","slug":"回溯法","permalink":"http://ckblogs.cn/tags/%E5%9B%9E%E6%BA%AF%E6%B3%95/"}]},{"title":"VScode让敲代码成为享受(敬请期待)","slug":"VScode让敲代码成为享受","date":"2021-04-24T15:59:25.000Z","updated":"2021-05-28T16:30:43.342Z","comments":true,"path":"2021/04/24/VScode让敲代码成为享受/","link":"","permalink":"http://ckblogs.cn/2021/04/24/VScode%E8%AE%A9%E6%95%B2%E4%BB%A3%E7%A0%81%E6%88%90%E4%B8%BA%E4%BA%AB%E5%8F%97/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"“开启我的博客之旅”","slug":"“开启我的博客之旅”","date":"2021-04-24T15:52:54.000Z","updated":"2021-05-28T16:47:30.650Z","comments":true,"path":"2021/04/24/“开启我的博客之旅”/","link":"","permalink":"http://ckblogs.cn/2021/04/24/%E2%80%9C%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85%E2%80%9D/","excerpt":"","text":"开启我的博客之旅 我为什么要搭建个人博客? 可能在多数人的心中，作为一个典型理工科学校的工科学生，大学生活应该被无数枯燥的代码、各种电路焊板、以及实验仪器所包围。想想上大学以来，自己也确实很少写些东西。当我看到目前在上中文系的一位好兄弟，在大学期间与同学一起创办的微信公众号，发布了一篇篇自己所写的文章，配上优美的图片。我那一刻突然好羡慕这样优雅的生活。 然而，在某一个晚自习的晚上，我在查询相关资料的时候，无意间闯入一位学长的个人博客： geminiplanet 我被其精美的博客布置，丰富的文章内容所惊艳，再欣赏了一篇篇文章后，无意间发现他是我的同校学长，更巧的是，他是至微（所在暑假支教队）的前辈。在他的个人博客中，有各种学习知识的总结、日常生活的感悟，以及一些小技巧的分享。看过他的一篇篇博文之后，我深深地感受到了拥有一个个人博客，这是一个多么有意义的事情。 继续深入了解之后，我注意到了更多人自我搭建的个人博客： 糖果屋 张洪HEO akilar’s 糖果屋 我深深被这一个个精美的博客网站所吸引，这不也是我们的浪漫吗？ 说干就干，等到正式搭建完成博客框架，当我输入ckblogs.cn在浏览器中，弹出自己的博客网站时，那一刻心中的惊喜是难以言表的！当我列好我想要书写，上传的文章，发现嘿自己能写的东西还挺多。于是我的博客就正式建立了。 在正式公布此博客前，我将此待完工博客分享给了几位朋友，得到了一个问题：“这样的博客与微博、知乎上的文章有什么不同呢？维护域名，购买oss存储，这都要花钱啊？”，看到这个问题，我当时竟一时间不能以让人十分信服的理由回击，现在我想了想，其实应该是这么个道理：当你在微博发文章时，只是在微博发文章，而当你创建一个个人博客时，你已经创建了一个微博！哈哈哈 我是如何搭建个人博客的 这是一个痛苦而又快乐的过程，这并不矛盾。搭建个人博客本身并不十分困难，不需要你有专业的计算机编程能力（当然你会一些前端搭建将更轻松），我是完全自学搭建，主要根据两位教程，一位是知乎的，链接如下： 从零开始搭建个人博客（超详细） 一位是 B 站的，链接如下： 手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo 事实上，正式搭建的过程中，耗时不长，但并不会一帆风顺的，我在搭建过程中遇到了无数的坑，但你要相信网络的力量是无限的，出错了就查查查！当你离成功越来越近的时候，你也将感受不到那些踩过的坑的痛苦了。 未来将考虑写我自己的搭建博客教程（敬请期待） 期待着同样对搭建个人博客感兴趣的你也能拥有一个自己的个人博客，到时候可以免费挂在我的友情链接里！！！ 我要写些什么? 事实证明，按时维护，持续更新博客是一件很难的事情，因为我总是被各种杂七杂八的事情所充斥。博客正式搭建完毕（未上传文章）大概是二一年的四月二十一日，我想写一些文章后再正式公布我的博客，但拖到了今天（五月底），陆陆续续完成了几篇，仍有几篇想要写的东西还没有完成。我想，在接下来的每段时间内，我都将保持记录生活，或者记录学习历程的态度，持续维护更新博客，不能只图一时之乐。目前，我想在我的博客中记录下面的内容： 生活感悟 记录一下生活中有趣的，或者值得回味，引发自己思考的事情。希望让每一天都更有意义。 学习历程 透露一点，博客内文章全由 Markdown 书写完成，Markdown 是一种笔记形式的文档格式，与 word 不同，Markdown 的书写是个享受的过程，另外 Markdown 对数学公式的支持和对编程代码的支持都很有助于我记录一些学习历程， 毕竟记忆一天不如一天。。。 有位同学给我说过，工科生应该掌握一个能力，就是先做，然后遇到不会的地方，再去查，再去做。任何时候需要去查阅相关资料。我想把博客变为一个可供我查阅资料的百宝箱，当然这里的资料应当是我自己总结而不是剽窃他人的。 “奇技淫巧” 在“探索世界”的过程中，我渐渐发现了些小妙招，这些小妙招将大大提高我们的工作效率，我将这些小妙招也总结为文，上传至博客中，希望各位也能获得启发，感叹妙哉！ 如何联系到我？ 当您有任何问题相与我交流时，可以通过首页个人介绍中添加我的个人ＱＱ或微信，关注我的哔哩哔哩（暂未有原创视频发布，未来会考虑）也可以直接在文章下评论区留言，留下自己的邮箱，我将通过邮箱的方式回复您（悄悄说一声，回复有惊喜哦）。","categories":[{"name":"生活","slug":"生活","permalink":"http://ckblogs.cn/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://ckblogs.cn/tags/%E7%94%9F%E6%B4%BB/"},{"name":"感念","slug":"感念","permalink":"http://ckblogs.cn/tags/%E6%84%9F%E5%BF%B5/"}]},{"title":"不一样的浏览器体验——油猴篇","slug":"不一样的浏览器体验-——油猴篇","date":"2021-04-24T15:52:29.000Z","updated":"2021-05-06T14:31:41.236Z","comments":true,"path":"2021/04/24/不一样的浏览器体验-——油猴篇/","link":"","permalink":"http://ckblogs.cn/2021/04/24/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BD%93%E9%AA%8C-%E2%80%94%E2%80%94%E6%B2%B9%E7%8C%B4%E7%AF%87/","excerpt":"","text":"不一样的浏览器体验——油猴篇 当本文侵犯了您的利益时，请立即联系本人，文章将即刻下架。 厌恶“破解”之人不建议阅读本文，建议支持正版（doge） 上一节中，我们介绍了浏览器几个插件的基本用法，在最后提出了油猴插件，那么油猴插件具体有哪些用呢？这一节，我将介绍几个油猴脚本的常见的强大功能！ 戳我重看上篇文章 本篇基于已经安装好油猴插件的谷歌或 edge 浏览器使用 寻找脚本 油猴插件属于脚本运行器，单单插件本身是没有具体功能的，需要我们添加油猴脚本，那我们应该从哪里寻找我们需要的油猴脚本呢？我提供下面的方案： 安装好油猴脚本后，我们可以在浏览器的右上角看到这个小猴子标志，左键点开后选择获取新脚本 点开之后，我们可以看到各个不同的脚本网站，我们选择最受欢迎的 GreasyFork . 点开脚本列表，你就可以看到各个开源脚本了，搜索框内支持脚本搜索，选择你想要的脚本，（一般在相应脚本介绍中有具体使用说明）并点击安装，即可成功运行。 脚本推荐 全网视频解析 脚本名称：懒人专用，全网VIP视频免费破解去广告、全网音乐直接下载、百度网盘直接下载、知乎视频下载等多合一版。长期更新，放心使用。 脚本地址：懒人专用，全网VIP视频免费破解去广告、全网音乐直接下载、百度网盘直接下载、知乎视频下载等多合一版。长期更新，放心使用。 脚本介绍：自用组合型多功能脚本，无需关注公众号，集合了优酷、爱奇艺、腾讯、芒果等全网VIP视频免费破解去广告，网易云音乐、QQ音乐、酷狗、酷我、虾米、蜻蜓FM、荔枝FM、喜马拉雅等网站音乐和有声书音频免客户端下载，百度网盘直接下载，知乎视频下载，优惠券查询等几个自己常用的功能。 脚本使用： 成功安装后，让我们打开优酷视频的任意一个VIP专属视频： 发现旁边多了个这样的小图标，我们将鼠标滑动到小图标上并选择 CHok 解析方法，神奇的事情出现了！ 一部需要 VIP 才能观看的视频，我们不需要登录也可以自由高清观看了： 注意： 当 CHok 解析方法解析失败时，可选择其他解析方法 其他视频网站如爱奇艺、芒果TV、腾讯视频操作与此相同 加密视频不支持破解，付费视频具有一定的成功率 百度网盘直接下载 本插件的使用需要安装 IDM 下载器，具体安装方法在上篇博客有所介绍： 戳我重看上篇文章 相信你一定在百度网盘中下载过东西，也一定被百度网盘的限速下载而强制冲会员。这个插件可以让你脱离百度网盘，直接将文件通过 idm下载器高速下载，远离被限速的烦恼。 脚本名称：百度网盘简易下载助手（直链下载复活版） 脚本地址：百度网盘简易下载助手（直链下载复活版） 脚本介绍：大概是目前唯一真正能用的直链下载助手了。免SVIP会员，免安装浏览器扩展，无视黑号。只要你有个Aria2或IDM，就可以使用你自己的帐号，享受极速下载的快感！ 脚本使用方法： 一、配置idm下载器 打开你的idm下载器：点开下载并选择选项 在选项页面选择“下载”，并将UA用户代理设置为: 1softxm;netdisk 完成后选择 “连接”，并设定最大链接数为4. 二、使用 我们在浏览器中打开百度网盘并登录自己的账号后勾选需要下载的文件：我们会发现，出现了这个简易下载助手选项： 选择点击获取支链地址（这时有时会进行人机验证，没关系我们验证就好了）让人恼火的是，我们需要关注这个公众号获取验证码才可获得支链地址。 没办法，谁叫这是人家自己写的脚本呢！我们照做就好了。 复制获得下载地址后，我们继续打开idm下载器： 选择新建任务: 将链接粘贴到地址栏中点击确定: 等待下载器确认下载类型后，选择合适的保存位置，就可以开始下载了： 你被它的速度惊艳到了吗？ 文本选中复制 相信在你查阅资料的过程中，想要复制一篇文章中的一段文字时，一定遇到过下面的情况： 百度文库： 道客巴巴： 什么？复制一段文字竟然还需要充值VIP！ 下面介绍的这个插件可以让你完全解除这个烦恼： 脚本名称：文本选中复制 脚本地址：文本选中复制 脚本描述：解除网站不允许复制的限制，文本选中后点击复制按钮即可复制，主要用于 百度文库 道客巴巴 无忧考网 学习啦 蓬勃范文 思否社区 力扣 知乎 语雀 等 脚本使用方法： 使用方法非常简单，当我们启用脚本后，继续像往常一样选中想要复制的文字时，你会发现文字旁边出现了一个“复制”小图标，点击这个图标，便可以免费复制了。 注意：当您复制的文字非个人使用时，一定要标注文章来源，尊重原创作者。 HTML5 视频播放器增强脚本 你是否想要掌控视频播放的一切：可以实现视频快进快退、倍速播放/加速播放、视频画面截图、画中画、网页全屏、调节亮度、饱和度、对比度、自定义配置功能增强等功能。 本插件完全可以提供上述功能，并且全部可以依靠键盘快捷键实现！ 什么？“被隐藏进度条的网课视频可以快进吗？”当然可以，在上篇文章中，介绍了可以最高十六倍速的快进插件，此油猴脚本更强大的便在于可以自主快进视频了！ 脚本名称：HTML5视频播放器增强脚本 脚本地址：HTML5视频播放器增强脚本 脚本描述：HTML5视频播放增强脚本，支持所有H5视频播放网站，全程快捷键控制，支持：倍速播放/加速播放、视频画面截图、画中画、网页全屏、调节亮度、饱和度、对比度、自定义配置功能增强等功能。 脚本使用方法：打开视频页面，使用下面快捷键进行控制： 快捷键列表 快捷键 说明 ctrl+\\ 快捷键是否全网页可用，默认true Ctrl+space 禁用/启用 该播放插件 → 快进5秒 ← 后退5秒 Ctrl+→ 快进30秒 Ctrl+← 后退30秒 ↑ 音量升高 10% ↓ 音量降低 10% Ctrl+↑ 音量升高 20% Ctrl+↓ 音量降低 20% C 加速播放 +0.1 X 减速播放 -0.1 Z 正常速度播放 shift+C 放大视频画面 +0.1 shift+X 缩小视频画面 -0.1 shift+Z 恢复视频画面 shift+P 进入或退画中画功能 shift+S 截图，截取当前画面并保存 shift+R 启用或禁止自动恢复播放进度功能 shift+→ 画面向右移动10px shift+← 画面向左移动10px shift+↑ 画面向上移动10px shift+↓ 画面向下移动10px Enter 进入全屏 shift+Enter 进入网页全屏 N 下一个/集视频（仅部分网站支持） D 上一帧 (截图时进行微调以找到质量最佳的一帧) F 下一帧 (不支持netflix，因为快捷键冲突) E 亮度增加% W 亮度减少% T 对比度增加% R 对比度减少% U 饱和度增加% Y 饱和度减少% O 色相增加 1 度 I 色相减少 1 度 K 模糊增加 1 px J 模糊减少 1 px Q 图像复位 S 画面旋转 90 度 总结一下 上述推荐的油猴脚本只是所有油猴脚本的冰山一角，还有更加强大的脚本在文章中不便诉说，等待着你的探索哦！ 文章完全原创，转载请注明出处。","categories":[{"name":"技巧","slug":"技巧","permalink":"http://ckblogs.cn/categories/%E6%8A%80%E5%B7%A7/"}],"tags":[{"name":"技巧","slug":"技巧","permalink":"http://ckblogs.cn/tags/%E6%8A%80%E5%B7%A7/"},{"name":"浏览器","slug":"浏览器","permalink":"http://ckblogs.cn/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"}]},{"title":"2021暑假支教课程设计","slug":"2021暑假支教课程设计","date":"2021-04-24T08:11:42.000Z","updated":"2021-05-28T16:30:07.369Z","comments":true,"path":"2021/04/24/2021暑假支教课程设计/","link":"","permalink":"http://ckblogs.cn/2021/04/24/2021%E6%9A%91%E5%81%87%E6%94%AF%E6%95%99%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/","excerpt":"","text":"本课程是本人为 2021 至微公益团队暑假支教所作课程设计，教学对象分三至六年级不等，课程设计仍在不断优化中。 课程一： 数学思维游戏与数学悖论 授课背景与目的 当前教育体系下，学校的数学教育主要面向应试，而“能做题，做对题”不应该是数学教育的目标。在一昧追求数学成绩的背景下，数学成为不少孩子厌恶的学科。为了提高孩子们的数学思维与逻辑创新能力，培养孩子们对数学的兴趣，本课程让孩子们进行发现、归纳、演绎和推理训练，为高等教育的研究学习撤下种子、打下基础，从而成就了他们的创造性思维与逻辑思维。让孩子们在生活中学数学，在数学中感受生活。课程以小组内合作，小组间竞争的方式进行，以锻造孩子们的集体荣誉感，打造有效、有活力的趣味课堂。 课堂信息 人数：30人左右 助教：0-1人 课时：4课时 简要安排: 具体划分为前两节课交流数学思维游戏&lt;一笔画&gt;&lt;抢数与24点&gt;，后两节课介绍简单数学悖论&lt;悖论初步&gt;&lt;著名数学悖论&gt;。课程以小组内合作，小组间竞争的方式进行，授课人提供游戏题目和思路，由孩子们讨论提供游戏方案，最后由授课人总结所蕴含的数学思维逻辑。 需要物资：小奖品、（暂定：扑克牌一副、橡皮筋50条）、最好有支持PPT播放的多媒体设备。 课程规划 第一节课： 一笔画 课前介绍： 自我介绍 我们的课程是什么？数学游戏又是什么呢？ 课堂规则说明： 同学们以小组为单位，5-6 人为一组，每个人都是每一组不可或缺的一份子，在本课程的进行中会有很多的抢答和比赛活动，游戏中表现好的一组会获得更高的积分，积分更高的一组将会得到奖励。 重点强调：课堂中有专门的时间供大家交流，但在老师介绍游戏的时候，为了每一位同学都能明白游戏规则，每一位同学需要保持安静，在老师多次警告时，可能会扣除该小组的积分哦 游戏介绍： “一笔画”是指笔不离开纸，而且每条线都只画一次不准重复而画成的图形。 你能用一笔画出下列图形吗？ 那么，像汉字“日”和“中”字的图形可以一笔画成吗？“田”和“目”形呢？ 游戏策略 上面的图形都可以一笔画成。“日”和“中”字形可以一笔画成，但是“田”和“目”字形不能一笔画成。这是为什么呢？ 柯尼斯堡七桥问题是图论中的著名问题。这个问题是基于一个现实生活中的事例：当时东普鲁士柯尼斯堡（今日俄罗斯加里宁格勒）市区跨普列戈利亚河两岸，河中心有两个小岛。小岛与河的两岸有七条桥连接。在所有桥都只能走一遍的前提下，如何才能把这个地方所有的桥都走遍？ 数学家欧拉给了我们答案，原来这与一个图形的“奇点”和“偶点”有关。我们先来了解什么是“交点”。数一数下列图形各有几个交点？ 交点分为两种： 从这点出发的线的数目是单数的，叫单数点（奇点）。比如下面的图形就是这样的： 从这点出发的线的数目是双数的，叫双数点（偶点）。比如下面的图形就是这样的： 总结如下：一个图形能否一笔画成，关键在于图中双数点的多少。 （1）一笔画必须是连通的（图形的各部分之间连接在一起）； （2）凡是图形中没有单数点的一定可以一笔画成。可选任一个点做起点，且一笔画后可以回到出发点。 （3）凡是图形中只有两个单数点，一定可以一笔画成。画时必须从一个单数点为起点，以另一单数点为终点。 （4）凡是图形中单数点的个数多于两个时，此图肯定是不能一笔画成。 下列哪些图形能一笔画出来，哪些不能？ 我们主要来看每个图形的“奇数点”和“偶数点”的个数。通过观察与数点，我们发现：上面一排的中间一个图形、最后一个图形和下面一排的最后一个图形的“奇数点”个数超过了两个，所以不能一笔画成。其他三个图形是可以一笔画成的。 不可以一笔画成的图形有： ​ （二）（三）（六） 可以一笔画成的图形有： ​ （一）（四）（五） 拓展思考： 想想为什么会有上面的结论呢？ 练习： 上面的图中，3、4不能一笔画成，其他都能一笔画成。 第二节课: 抢数与二十四点 抢数 游戏介绍： 两个小朋友一起做报数游戏，从1开始按数的顺序报数报道30，每人每次可以报一个数或两个数，不能不报，谁抢到30谁就赢。 在这里与小朋友们互动，让两组间的小朋友进行两两PK，并记录获胜分数 在紧张的游戏之后，授课人提出自己一定能赢，并让小朋友们与自己尝试“注意自己要是后者”，利用必胜策略，勾起小朋友的好奇。 必胜策略： 要抢到 30，必须抢到 27 ;要抢到 27，必须抢到 24 。如此倒推回去，可得到一系列关键数 30、27、24、21、18、……9、6、3。 根据以上分析，抢30游戏本身并不是一个公平的游戏，初始数和先后顺序已经决定了最后的结果，因为只有后报数者才能抢到3的倍数，后报数者有必胜策略。 拓展思考： （1）每人每次可以报一个数或两个数，不能不报，谁抢到50谁就赢。 （2）每人每次可以报一至三个数，不能不报，谁抢到30谁就赢。 （3）每人每次可以报一至四个数，不能不报，谁抢到30谁就赢。 你学到了什么： 数学递归思想 数学是如此，人生其实也是这样，为什么我们必须要让自己比别人先迈出第一步呢？后来者居上，后发制人，看其实生活中处处有数学，数学中也处处包含着生活的道理。 二十四点 游戏介绍 ： 任意抽取一副扑克（去除J、Q、K、大王、小王）的 4 张牌，最快用加、减、乘、除（可加括号）把牌面上的数通过四则运算的方式算出 24 者胜。 举例介绍： 由授课人现场出题(或抽题)，让各个小组讨论协商，提供合理解者，获得得分。 给出下面的试题准备： 试题答案1 4 9 10 6 6 2 10 6 9 3 8 9 3 1 3 4 8 1 8 8 2 1 8 3 4 5 6 3 6 6 1 4 5 1 3 2 10 2 2 2 2 4 7 2 2 10 3 7 7 1 2 5 7 2 9参考答案： 1＋4＋10＋9＝24 6＋6＋2＋10＝24 9÷（6－3）×8＝24 9×3－3×1＝24 8×4－8×1＝24 8×2＋8×1＝24 [5-（4－3）]×6＝24 6×3＋6×1＝24 4×5＋（3＋1）＝24 2×10＋2＋2＝24 （4＋7）×2＋2＝24 （10＋3）×2－2＝24 （7×7－1）÷2＝24 5×7－2－9＝24 游戏策略： 最常见的算法是3×8,4×6,2×123\\times 8 , 4\\times 6, 2\\times 123×8,4×6,2×12所以最先考虑的应该是上述3种算法。一般情况已有其中的一个因子，而用其他 3 个数去另一个因子。 eg: 3 2 1 4 消去法。3个数就可以算出24，多出来一个数，用消去法，可将多余的数除去。 eg：3 5 9 10 eg：2 5 8 8 上天法。先将数乘得很大，最后再除于一个数得24 eg: 10 10 4 4 入地法。先将数算成分数或小数，最后乘于一个数得24 eg : 3 3 7 7 极限挑战： 引出编程求解。 你学到了什么 凑配、主元、消元法 常怀对数学的热情 探索更神奇的世界 第三节课：悖论初步 小蚂蚁爬橡皮绳 问题描述：一只蚂蚁沿着一条长100米的橡皮绳以每秒1厘米的匀速由一端向另一端爬行。每过1秒钟，橡皮绳就拉长 100米，比如 10秒后，橡皮绳就伸长为1000米了。现在假定橡皮绳可任意拉长，并且拉伸是均匀的；蚂蚁也会不知疲倦地一直往前爬，在绳子均匀拉长时，蚂蚁的位置理所当然地相应均匀向前挪动。现在要问：如此下去，蚂蚁能否最终爬到橡皮绳的另一端？ 让孩子们思考并让他们举手提出自己的看法，在三四个左右的回答后提出答案“小蚂蚁可以爬到橡皮绳的另一端”让孩子们理解“橡皮绳是拉伸均匀的”，可以拿一个橡皮绳画一道黑色笔记（代表蚂蚁），拉伸橡皮绳，观察黑色印记的前进方式，领会本题的要点。 悖论介绍： 上面的这种说法是正确的。但要解释清楚，却又觉得很难。这种看似这样，其实那样的数学问题（命题），数学史把它们称作“数学悖论”。什么是悖论？从数学理论的角度讲，即从一些貌似正确或看来可接受的约定出发，经过简明正确的推理，却得到自相矛盾的结论，这样的议论就称为悖论。悖论的起源几乎与数学史同步，却导致三次“数学基础危机”，使人们对数学产生怀疑，同时也从侧面促进了数学的发展。 与孩子们交流常见的悖论问题： 1、“说谎者悖论”。 这个悖论最早是在公元前六世纪出现的。当时克里特岛哲学家爱皮梅尼特曾说过： “所有的克里特岛人都说谎”。 那么这句话是真话还是假话呢？ 2、这是“说谎者悖论”的又一个变例。 让孩子们在同一张纸上写出下列两句话： ①下一句话是谎话 ②上一句话是真话 这两句话该怎样理解？你能理解出来吗？ 3、罗素悖论 一天，萨维尔村理发师挂出了一块招牌：村里所有不自己理发的男人都由我给他们理发。于是有人问他：“您的头发谁给理呢？”理发师顿时哑口无言。 4、上帝悖论 有个虔诚的教徒，他在演说中口口声声说上帝是无所不能的，什么事都做得到。一位过路人问了一句话：“上帝能创造一块他自己也举不起来的石头吗？” 同学们，这个虔诚的教徒能回答路人的提问吗？ 5、‘不’与‘是’悖论 让孩子们进行下面的有趣的对话： 甲对乙说：“你下面要讲的是‘不’，对不对？请用‘是’或‘不’来回答！” 这句话，乙同学能回答出来吗？ 第四节课：著名数学悖论 一块钱去哪了？ 问题描述： 请各位小侦探们办办案，大家能否找到丢掉的一块钱呢？ 有三个人去投宿,一晚三十元.三个人每人掏了10元凑够三十元交给了老板 . 后来老板说今天优惠只要25元就够了,拿出5元命令服务生退还给他们, 服务生偷偷藏起了2元, 然后,把剩下的3元钱分给了那三个人,每人分到1元.这样,一开始每人掏了10元,现在又退回1元,也就是10-1=9元，三人一共3*9=27元，加上服务员自己偷偷藏得2元一共29元，还有一元去哪里了呢？ 引导孩子们思考交流其中的逻辑陷阱 个人解答： 那一元钱本身是不存在的 ，三个人住店共30元，老板退回5元，那就是说他们三人总共花了25元；然后服务员又退回每人一元，也就是说他们一共花了28元，加上老板弟弟拿的2元，刚好30元 1.总共的钱（30）=住店的人花出去的钱（27）+身上剩余的钱（3） 2.总共的钱（30）≠住店的人花出去的钱（27）+弟弟偷的钱（2） 3.住店的人花出去的钱（27）=老板赚的钱（25）+弟弟偷的钱（2） 芝诺乌龟悖论 问题描述： 阿溪里斯是古希腊神话中善跑的英雄，现在让他和乌龟赛跑。假定他的速度为乌龟的10倍。乌龟先出发，走了1米。阿溪里斯开始追赶它，当阿溪里斯走完这1米时，乌龟又向前走了0.1米；阿溪里斯再走完这0.1米时，乌龟又向前走了0.01米……阿溪里斯的速度再快，走过一段路总得花一段时间，乌龟速度再慢，在这一段时间里也总要再向前走一段路程。这样说来，阿溪里斯是永远追不上乌龟了。同学们，你认为这种说法正确吗？你能说出其中的理由吗？ 从这个悖论介绍到0.9九的循环等于1这个概念 让同学们小组交流谈谈自己的看法。 结课升华： 这个问题困扰了科学家近两千多年，直到十八世纪牛顿等科学家用微积分彻底解决了这个难题，数学悖论不断推动着人类的进步。通过数学游戏，数学悖论这四节课，希望同学们能真正感受到数学的魅力，时刻保持着学习数学，解决数学难题的热情和决心，相信数学也能帮助你在今后的生活中保持缜密的思维逻辑，严谨的求实精神，真正将数学与生活联系起来，甚至帮助并推动人类数学的进步！我相信大家，我也期待你们的好消息，谢谢大家！ 注意事项： 强调教课中小组间竞争与小组内合作的必要性，对较有难度的问题要有耐心、多举例的分析问题，对孩子们比较感兴趣的游戏要加以拓展。培养孩子们的数学兴趣需要及时活跃课堂气氛，但也要保证课堂纪律及课程的正常进行，将数学游戏与数学游戏中所剖析出的人生哲理要加以分析，让孩子们在游戏中学到真正受益一生的道理，拥有对数学学科的兴趣，锻炼数学思维是本课程的最高目标。 课程二：快乐乒乓 授课背景与目的 乒乓球是中国的国球，这项运动是集健身、竞技和娱乐为一体的运动，同时又是技术和战术完美结合的典型。乒乓球是一项集力量、速度、柔韧、灵敏和耐力素质为一体的球类运动，同时乒乓球具有明显的竞技性特点和娱乐功能，又使其成为一项培养机智果断等品质和保持青春活力，调节神经的有效运动。通过参加乒乓球训练可以培养人坚忍不拔的韧性，培养团队精神通过参加乒乓球训练能提高儿童少年的身体协调性、反应灵敏度，促进新陈代谢通过参加乒乓球训练可以强身健体。乒乓球运动要求全身性的协调与配合，可极大程度地改善孩子的体质，增强其心肺功能，并完善其不均衡的体型通过参加乒乓球训练可以增强体质，对保护眼睛，提高视力有很多帮助通过学习乒乓球，青少年可以扩大自己的社交范围，感受运动的激情与快乐，共同的兴趣爱好，可以结交许多朋友。打乒乓球不止是拥有一项特长，而是在打球的过程中，学会刻服，学会勤奋，学会控制情绪，学会做人！乒乓球具有安全，易上手，所需场地条件低等特点，利于小学三-六年级的小朋友培养体育兴趣爱好，增强国家自信。本课程将教授乒乓球基本规则和基本打法，致力于让每一个孩子学会基本的乒乓球玩法，培养基本的乒乓球爱好，能在今后的生活中感受乒乓球的魅力，爱上乒乓球运动。 课堂信息 人数: 30人左右 助教：1-2人 课时: 4-5课时 简要安排: 本课程将教学与学生练习相结合，通过对乒乓球具体规则的介绍开始，讲解了乒乓球基本握拍，发球，击打方法，让每一位同学会玩乒乓球。在此基础上进行旋转球、扣杀球的拓展提高，并对多人乒乓球（双打和团体）进行介绍。在每节课有充分的时间交给孩子们自主练习，学生以每四人为一组，这个过程需要授课者到每一组前去纠正孩子们的具体姿势和动作，致力于培养孩子们的运动兴趣。 需要物资: 乒乓球拍（数量为具体上课人数的一半）、乒乓球（数量为具体上课人数）、需要学校有一定数量的乒乓球桌 课程规划 第一节课：乒乓球介绍与乒乓球基本规则 室内上课，进行如下： 自我介绍和介绍对乒乓球在中国的发展： 建国后我国处于积贫积弱的状态，美国等资本主义国家封锁我国的经济，1958年以后和苏联的关系恶化，更加剧恶化了我国的国际生存空间，中国基本处于自力更生的状态。而在这个时候想要证明自己也只能从体育口取得突破，特别是1959年容国团获得世乒赛单打冠军，这是新中国的第一个世界冠军，一下子振奋人心，当时中国体育只有乒乓球一枝独秀，所以乒乓球也就是人们茶余饭后的谈资，乒乓球器材简单，所以从国家领导人到普通人都在打乒乓球，乒乓球逐渐确立了国球地位。 1961年世乒赛在北京举办，中国队取得了好成绩，男团五虎将勇夺男团冠军，团体冠军最能体现一个国家乒乓球实力。1961年1963年1965年中国连续三次获得世乒赛团体冠军，而且出现了乒乓球界的传奇人物庄则栋，因为他也连续三次获得世乒赛单打冠军，获得了圣勃莱德杯的复制杯，只有连续三次或者不连续四次才能获得世乒赛奖杯的复制杯，我印象中只有两位选手获得此殊荣：庄则栋、王楠。 中国队至此开始了长盛不衰，中间可能会有几年的低谷但都会很快重登巅峰，相对的低谷就是1989年以瓦尔德内尔佩尔森为代表的瑞典队的崛起，中国队陷入低谷，整个80年代末90年代初，中国队都在与世界强队竞争，直到1995年世乒赛中国队重夺男团冠军，中国队正式走出低谷，新一代的国乒人才出现：刘国梁孔令辉。到了王励勤马琳王皓这一批运动员中国乒乓球重登巅峰，成为世界绝对强队，变得不可战胜，2001年之后重大赛事团体赛再无失手（2010年莫斯科世乒赛女团失手），到了马龙张继科许昕三驾马车中国队已经难觅对手。 一代一代的国乒人，通过他们的努力才达到今天的成就和底蕴，今天乒乓球有完备的人才培养体系，有世界最强大的人才储备，也有世界杯强大教练队伍，当今国乒，有这样的成绩是几辈人的努力。 介绍乒乓球在中国的发展史，建立小朋友们对乒乓球的自信心：中国人擅长乒乓球 此处可以放乒乓球的精彩视频勾起小朋友的兴趣 为什么要学习乒乓球 乒乓球是一项集力量、速度、柔韧、灵敏和耐力素质为一体的球类运动，同时乒乓球具有明显的竞技性特点和娱乐功能，又使其成为一项培养机智果断等品质和保持青春活力，调节神经的有效运动。通过参加乒乓球训练可以培养人坚忍不拔的韧性，培养团队精神通过参加乒乓球训练能提高儿童少年的身体协调性、反应灵敏度，促进新陈代谢通过参加乒乓球训练可以强身健体。乒乓球运动要求全身性的协调与配合，可极大程度地改善孩子的体质，增强其心肺功能，并完善其不均衡的体型通过参加乒乓球训练可以增强体质，对保护眼睛，提高视力有很多帮助通过学习乒乓球，青少年可以扩大自己的社交范围，感受运动的激情与快乐，共同的兴趣爱好，可以结交许多朋友。打乒乓球不止是拥有一项特长，而是在打球的过程中，学会刻服，学会勤奋，学会控制情绪，学会做人！ 强调说明上课纪律 以四人为一小组，第一节课在室内讲解具体规则，第二节课开始在室外学习乒乓球，具体纪律如下： 注意安全，不得擅自离开乒乓球场地，严格听从老师和助教安排。 不得损坏乒乓球拍，乒乓球和乒乓球桌，上课后先听从老师讲解具体操作，经老师同意练习后，方可散开练习。 四人一小组，轮流练习，不得与同学发生冲突与争执，有任何问题第一时间告诉老师，要主动谦让同学。 下课后主动归还乒乓球拍和乒乓球，依次回到教室，不得逗留嬉戏。 乒乓球基本规则介绍 合法发球 合法击球 常见犯规错误 第二节课：握拍、发球、基本击打、具体分析乒乓球策略 根据小朋友的乒乓球基础，调整授课着重点 组织同学们有序到底体育场，并做热身运动 在这里可以与助教进行乒乓球比赛表演 教学内容：(大概15分钟左右) 一、握拍： 提供两种握拍方式供同学们选择，横排（有利于进攻）与直拍（有利于防守），建议初学者以直拍的方式击球，规范每位同学的握拍方式。 二、发球： 在乒乓球桌上，讲解乒乓球发球规则，并做演示，初学者可以采用弹发球的形式 三、基本击打： 在乒乓球桌上，讲解乒乓球击打的具体规则，要点，和具体扣分情况，并与助教进行演示（横排与直拍都演示） 练习（25分钟左右）： ​ 每组成员四人轮流交替，授课者依次前往每一组具体指导乒乓球发球击打动作。注意关注每一位同学。对表现优异的同学要加以表扬，对暂时打的不好的同学要加以耐心的鼓励和指导。 下课（提前5分钟）： 距离下课时间提前五分钟集结队伍并点数，确保每一位同学均在队伍中，询问本节课的收获、疑惑和建议，后整齐带入教学楼中。 第三节课：反手拉杆球、正手攻球 组织同学们有序到底体育场，并做热身运动 在这里可以与助教进行乒乓球比赛表演 教学内容：（大概15分钟左右） 一、反手拉杆球： 注意讲解反手拉杆球的运用时机，具体的动作、姿势要领、反手握乒乓球拍的手势、以及乒乓球拍的角度和反手拉球的力度。 &lt;与助教进行一对一的反手拉杆球对拉，注意强调乒乓球的运球节奏。&gt; 二、正手攻球： 注意讲解正手攻球的运用时机，具体的动作。姿势要领、正手握乒乓球拍的手势、以及乒乓球拍的角度和正手攻球的力度。 与助教进行一对一的正手攻球对攻，注意强调乒乓球的正手攻球节奏 练习：（25分钟左右） ​ 每组成员四人轮流交替，每两位同学进行五组反手拉杆球，五组正手攻球训练。授课者依次前往每一组，注意纠正同学们的动作和姿势和握拍。对表现优异的同学要加以表扬，对暂时打的不好的同学要加以耐心的鼓励和指导。 下课（提前5分钟）： 距离下课时间提前五分钟集结队伍并点数，确保每一位同学均在队伍中，询问本节课的收获、疑惑和建议，后整齐带入教学楼中。 第四节课：&lt;暂定：旋转球、扣杀球/若小朋友接受较好则上这节提高课，否则跳过&gt; 组织同学们有序到底体育场，并做热身运动 在这里可以与助教进行乒乓球比赛表演 教学内容：（大概15分钟左右） 此内容为提高内容，注意因材施教 一、旋转球： 讲解旋转球的基本原理，旋转球的基本威胁方式，旋转球的基本应对方式，重点讲解旋转球的打法和旋转球的应对方法。 二、扣杀球： 讲解扣球的基本操作，重点讲解扣球的动作要领和击打力度与击打角度。讲解扣球的基本应对方式（包括防守和反攻）。 三、人生升华： 旋转球与扣球是一柔一刚，各有特点，这与中国阴阳观点相似。一昧的旋转球缺乏攻击力，一昧的扣杀球失误率高，并且防守性低，只有兼并刚柔，并内化于心，才能真正学好乒乓球，乒乓球如此，人生也是如此，这就是唯物辩证。 练习：（25分钟左右） ​ 每组成员四人轮流交替，对不同接受程度的同学进行自主的训练，乒乓球基础较好者可以继续训练旋转球与扣杀球，或者其他同学可选择复习训练上节课内容。授课者依次前往每一组，注意纠正同学们的动作和姿势和握拍。对表现优异的同学要加以表扬，对暂时打的不好的同学要加以耐心的鼓励和指导。 下课（提前5分钟）： 距离下课时间提前五分钟集结队伍并点数，确保每一位同学均在队伍中，询问本节课的收获、疑惑和建议，后整齐带入教学楼中。 第五节课：&lt;多人乒乓球初步&gt; 本节课注重培养小朋友的团队协作能力与团队默契，丰富更多的乒乓球打法 组织同学们有序到底体育场，并做热身运动 在这里可以与助教进行乒乓球比赛表演 教学内容：（大概15分钟左右） 一、乒乓球双打介绍 （男子双打、女子双打、混合双打）： 中国乒乓球双打获得的荣誉 具体击打的方式与规则 注意事项 这里可以和助教选择两位同学进行双打示范 二、团体乒乓球介绍 （男子团体、女子团体） 中国团体乒乓球获得的荣誉 具体规则 练习：（25分钟左右） 每两组同学组合，先进行双打练习，注意强调乒乓球击打的顺序。 两组同学练习双打后，可进行乒乓球团体对打训练。 对表现优异的同学要加以表扬，对暂时打的不好的同学要加以耐心的鼓励和指导。 下课（提前5分钟）： 距离下课时间提前五分钟集结队伍并点数，确保每一位同学均在队伍中，询问五节乒乓球课后学生们的收获，并承诺对感兴趣的同学可以在空闲时间与自己进行乒乓球的训练和比赛，后整齐带入教学楼中。 注意事项： 室外体育课的学生安全是首位，在此前提下进行乒乓球的授课；对学生的课程教授要有耐心，并给予奖励与鼓励；在乒乓球的教学中，致力于培养孩子们运动的兴趣，并注意对孩子们民族自信、中国自信力的培养。对不同的学生要因材施教，不能以唯一标准评判每一位学生的努力。","categories":[{"name":"生活","slug":"生活","permalink":"http://ckblogs.cn/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://ckblogs.cn/tags/%E7%94%9F%E6%B4%BB/"},{"name":"支教","slug":"支教","permalink":"http://ckblogs.cn/tags/%E6%94%AF%E6%95%99/"}]},{"title":"不一样的浏览器体验——插件篇","slug":"不一样的浏览器体验——插件篇","date":"2021-04-22T13:02:33.000Z","updated":"2021-04-26T13:11:08.712Z","comments":true,"path":"2021/04/22/不一样的浏览器体验——插件篇/","link":"","permalink":"http://ckblogs.cn/2021/04/22/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BD%93%E9%AA%8C%E2%80%94%E2%80%94%E6%8F%92%E4%BB%B6%E7%AF%87/","excerpt":"","text":"不一样的浏览器体验—— 插件篇 作为你手中的浏览器，它是一个什么样的存在呢？ 只是单纯的一个搜索引擎 偶尔看看浏览器里的小说和小视频 获取重要学习资料的场所 本文将改变你对传统浏览器的认识，用神奇的浏览器插件小技巧，为你的生活带去你难以想象的方便！ 本文基于 Windows 端浏览器，支持 Windows 7及以上的用户使用，手机端浏览器亦可以有相关操作，具体还看博主的后续文章更新。 浏览器的选择 远离他们： 你是否还在受下面浏览器所“毒害”： QQ 浏览器： 我承认QQ 浏览器功能确实多：看小说、解压缩、查看文件，但它体积过于庞大，浏览器内部广告众多，并充斥着“软色情”，不够简洁，重要的是不支持插件 360 浏览器： 360 全家桶一直是我认为最流氓的流氓软件，与QQ浏览器一样，360浏览器体积庞大，内部广告众多，让人用着很是不爽，重要的是不支持插件 IE 浏览器： 曾经称霸浏览器界的老大哥 IE 浏览器，目前已经是个充满诟病的浏览器，作为各大前端程序员眼中最为痛恨的存在，“是时候升级你的浏览器了！”，亦不支持插件 本文推荐： 细心的读者可能注意到了，我所强调好用的浏览器，至少应该满足下面的特点： 轻便快捷 简洁无广告 支持浏览器插件 基于上面的特点，强烈推荐大家使用下面的两款浏览器： 谷歌浏览器 我愿称谷歌浏览器为当今时代的浏览器王者，不仅因为它具有及其简介的页面，还以为它强大的内核。但由于某某原因，谷歌浏览器内的部分应用在国内无法正常使用，（如果你会科学上网的话，还是推荐使用谷歌浏览器）下面放出它的官网下载地址： chrome 浏览器官方网站 edge浏览器 当前微软公司推出的 edge 浏览器已经完全有了与谷歌浏览器相抗衡的实力，它支持谷歌浏览器内部的所有插件，拥有着同样简介的页面和人性化的设置，重要的是，它的全部应用皆在墙内，通过国内网皆可直接打开，对于插件小白选手，选择 edge 浏览器入手，绝对是不错的选择，下面放出它的官网下载地址： Microsoft Edge 浏览器官方网站 安装包蓝奏云网盘下载 密码:33jq 插件简介 浏览器的插件可谓浏览器的“灵魂”，本文以 edge 浏览器为例，展开介绍，谷歌浏览器与此大同小异。首先点开浏览器右上角那三个点，选择扩展，这里就是浏览器插件的管理面板。 注意你的浏览器打开的样式可能与我不同，不要慌张，不影响接下来的步骤，在我一步步的介绍中，你也可以把你的浏览器调试的比我的更好看，更好用！ 接下来打开扩展商店： 你将会看到下面的页面: 但是这样的方式得到的插件不全，因为众多功能强大的插件是未能获得edge扩展商店收录，所以我介绍下面的安装方式： 打卡开发者模式： 将我提供的插件直接拖入其中： 即可成功安装。好了，至此，你已经成功开启了插件之旅，那么又有哪些值得推荐的插件呢？下这些插件，我将一一介绍！这些插件我都将以网盘蓝奏云的方式提供给大家 选择蓝奏云而非百度网盘的原因是：无需登录、无限速 插件推荐 Infinity新标签页 插件介绍插件安装 还记得我的个人标签页面嘛，简洁、高效、美观，这得益于插件“ Infinity 新标签页 ”，获取扩展并在扩展管理面板选择启用后，你的个人标签页就可以启动了，你可以自行设置标签页快捷应用和壁纸。是不是很帅呢！此扩展可在扩展商店直接搜索安装，也可在，蓝奏云网盘处下载到本地再拖入管理面板中： Infinity 蓝奏云下载 密码:b9nr AdBlock插件 插件介绍插件安装接下来的插件可谓是广告杀手! AdBlock 是一款免费但是强大的拦截广告插件，它可以有效阻断百分之九十的浏览器页面广告，更强大的是，倘若出现了未能拦截的广告，可以自行选择设定拦截规则。 在首页最热门的插件中，AdBlock 扩展当然不容我们忽视，它是最强的广告阻止插件 Edge 浏览器可以直接在扩展商店首页看到它,将他直接安装后,可以在这里看到它的标志。 其他用户可以在我的蓝奏云处下载到本地，并将插件拖入到扩展的面板管理处！ AdBlock 蓝奏云插件安装包 密码:a36q Video Speed 插件介绍插件安装这款插件由好兄弟 ‭ShatteredXZ 向我提供，在这里向他表示感谢！ 这款插件的强大之处就是，它可以解析绝大部分的视频网页，可以对视频选择最高 16 倍速的快进速度。博主亲测16倍速后，播放快慢只取决于你的网速能不能跟上它播放的速度！ “我需要那么快的播放速度，我还看什么视频啊！” “哎，对了，你的军理网课看完了吗？” “噢 ~ ” 没错，无论视频网页是否限制快进、限制拖进度条，此插件均可以提高播放速度。 我们以学习通的视频为例,来看看它的威力: 有人问，那有可以拖进度条的插件吗？上方的课程是因为我完成了任务点，可以开启拖动进度条，但对于这个插件而言，没有拖动进度条的功能，只能倍速播放。但强大的插件总是能满足你的幻想，再下一章“ 详解油猴插件 ”中我将具体介绍，那里可是满满的干货！ 此款插件只支持蓝奏云本地下载并拖入浏览器扩展中 Video Speed 插件压缩包 密码：9bt1 IDM Integration Module 插件 插件介绍插件安装我们下载东西的过程中，最让人头大的莫过于龟速般的下载速度了，这款插件的强大之处有两方面 绝对高速下载任何文件 自由下载页面的所有视频／影评资源 当你想要下载一部B站的视频时，并不支持直接下载到本地，这时你就可以采用IDM下载插件，具体操作如下图所示： 将会弹出下面的提示信息，选择合适的保存路径你就会感受到飞一般的下载速度！！！ 很多小伙伴是不是想让这个下载器下载存储在百度网盘内被百度网盘限速的文件呢？没错，接下来的借用下面将要介绍的强大的油猴插件，将实现这个功能，不再被百度网盘这个**限速。IDM 插件依靠外部 IDM 下载器，将 IDM 外部下载器正确安装后即可自动将插件部署到你对应的浏览器中，但可惜的是，正版 IDM 下载器只提供 30 天免费试用期，后期需要交钱才能继续使用。 因此，我提供下方的 IDM 破解版的下载地址，并提供一个 B 站 up 主的破解教程，破解很方便，几分钟就能成功了！！！ IDM 安装包 IDM 破解教程 TamperMonkey油猴插件 插件介绍插件安装这个插件可谓浏览器插件之王！它更像一个脚本运行器，无数牛人的开源脚本皆可运行在这个插件中，为你服务。 你是否渴望着： 爱奇艺、优酷、腾讯、芒果等各大网站免费去广告看VIP视频 百度网盘高速下载不被限速 百度搜索不再显示广告 包括百度文库在内的所有网站不被限制复制文字 只有你想不到，没有它做不到！ 还有一些不能说的功能，可以悄悄给大家透露一点（这只是冰山一角！）： 由于其功能的强大和丰富，我决定为油猴插件再专门新建一篇博文（不是水文章！）大家敬请期待。Edge 浏览器可以直接在扩展商店下载： 也可以用我提供的蓝奏云网盘地址，将插件下载到本地，再拖入扩展的管理面板中： 油猴蓝奏云网盘地址 密码:fbug 总结 以上介绍的只是我所常用的插件的一部分，浏览器插件的功能还有很多很多，等待着你的探索，欢迎各位与我一同交流分享你的发现哦！","categories":[{"name":"技巧","slug":"技巧","permalink":"http://ckblogs.cn/categories/%E6%8A%80%E5%B7%A7/"}],"tags":[{"name":"技巧","slug":"技巧","permalink":"http://ckblogs.cn/tags/%E6%8A%80%E5%B7%A7/"},{"name":"浏览器","slug":"浏览器","permalink":"http://ckblogs.cn/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"}]},{"title":"Hello,My Blog!","slug":"Hello-My-Blog","date":"2021-04-21T09:54:34.000Z","updated":"2021-04-21T14:34:12.882Z","comments":true,"path":"2021/04/21/Hello-My-Blog/","link":"","permalink":"http://ckblogs.cn/2021/04/21/Hello-My-Blog/","excerpt":"","text":"Hello,World! Hello,My Blog!","categories":[{"name":"其他","slug":"其他","permalink":"http://ckblogs.cn/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"尝试","slug":"尝试","permalink":"http://ckblogs.cn/tags/%E5%B0%9D%E8%AF%95/"}]},{"title":"记 2021 UESTC 数学建模新生杯","slug":"记 2021 UESTC 数学建模新生杯","date":"2021-04-13T11:04:55.000Z","updated":"2021-04-22T13:16:49.770Z","comments":true,"path":"2021/04/13/记 2021 UESTC 数学建模新生杯/","link":"","permalink":"http://ckblogs.cn/2021/04/13/%E8%AE%B0%202021%20UESTC%20%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E6%96%B0%E7%94%9F%E6%9D%AF/","excerpt":"","text":"记 2021 UESTC 数学建模新生杯 2021 数学建模新生杯落下帷幕，在两天半的头脑风暴后，我想把这一切，包括所想所感所学，全部记录下来，作为 CK’s blogs 的一篇正式的博客。希望这是一个美好而有意义的记录。 准备比赛 电子科技大学的数学建模文化一直很浓厚，作为一个什么比赛都想试试的人来说，数学建模当然要参加。在第一学期已经很幸运地寻找到两位志同道合的队友，并成功参赛第一学期美赛模拟赛的基础上，我对这次新生杯比赛已经不再陌生，甚至会有一些期待。 期待比赛意味着必须要对这次比赛做好万足准备，对于这次新生杯比赛，有哪些做的好的地方，又有哪些需要改进的地方呢？做一个系统的总结在这时显得非常有必要，接下来，我将从准备与进行两方面展开我的想法。 建模准备 数学建模的核心当然是编程提前学习了解各大模型及其算法程序，这当然是一个数学建模人必修的功课，但在比赛前昔，我们可以粗略地浏览一遍各大类型模型，比如规划模型类、评价模型类、预测模型类如下图所示等等， 做到心中有数，拿到比赛题目时就可以直接划分题目大概属于哪一个个类型，在那个类型的模型中，再逐一去具体地找合适的模型。 在这里也列出我的一位校友学长的个人博客，这篇博客是我在比赛前昔查阅到的，这篇博客以至于这位学长的其他博客深深震撼、惊艳了我，因此这也成为了我开发个人博客的源动力，这篇数学建模模型总结也具有相当高的质量，下面这篇博客也正是这位学长的： geminiplanet.cn 编程准备 编程想要速成是很难的，能做的可能只有祈祷模型所需要的求解算法已经有很多前人做好了轮子。但依然可以找到所谓的“算法程序包”，抱歉这里不方便列出，但会熟练地使用程序包是意义不大的，因为就像本次比赛一样，在原有的算法基础上，题目条件偏偏要给你改变一下，要你不得不修改或者重新编写自己的程序。这就要靠长久的学习和积累。说实话，这也是我想要努力提升自己的一方面。正式比赛前的准备依然可以从各大算法开始着手了解。 写作准备 我至今都相信，建模编程占五分，写作一家就占五分，可能会更多，一篇好的模型，倘若写的稀巴烂也没有任何意义，但是一个连自己都无法说服的模型，只要写作手能圆好，一样有可能可以受到青睐。 “我能把正的忽悠邪了，能把奸人忽悠苶了，小两口过的挺好，我给他忽悠分别了。今天卖拐，一双好腿我能给他忽悠瘸了” 而对于比赛前写作的准备，我认为首先需要提前清楚待参加数学建模比赛类别（如国赛、美赛）及其写作要求，并做好或找到 LaTeX 模板准备，对于LaTeX 模板，可以去 GitHub （需要科学上网）上寻找，在这里列出本次新生杯所用的国赛模板 GitHub 地址： GitHub 上国赛 LaTeX模板 拿到 LaTeX 模板，clone 到本地后一定要在自己的编译器上做好调试，出现了任何问题都有时间及时解决，不能把比赛的宝贵时间浪费在无用的调试 LaTeX 代码上，这肯定是没有意义的。一般提供的模板是以模板使用说明的方式提供的，所以需要备份两份，一份作为使用说明，一份准备套入写作模板。 本次比赛就在这方面尝到了甜头，一路写下来非常顺利，即使我已经很久没有用过 LaTeX 了！ 除了对模板的准备外，写作格式需要有所约束，我在比赛前一天，研究了一下历年来的国赛一等奖论文，尤其是被我们学校数模教练推荐的获奖论文，从这些论文里，你发现一定可以提炼出一套写作模板。在正式比赛当中也可以随题目小做修改。下面是这次的写作格式模板: 1234567891011121314151617181920 \\section&#123;问题重述&#125; \\subsection&#123;问题背景&#125; \\subsection&#123;问题要求&#125;\\section&#123;问题分析&#125; \\section&#123;名词的解释与变量符号说明&#125; \\subsection&#123;名词解释&#125; \\subsection&#123;变量符号说明&#125; \\section&#123;模型的建立与求解&#125; \\subsection&#123;XXX模型&#125; \\subsubsection&#123;XXX模型的建立&#125; \\subsubsection&#123;XXX模型的求解&#125; \\subsection&#123;XXX模型&#125; \\subsubsection&#123;XXX模型的建立&#125; \\subsubsection&#123;XXX模型的求解&#125; \\section&#123;模型检验&#125; \\section&#123;模型评价&#125; \\subsection&#123;模型优点&#125; \\subsection&#123;模型缺点&#125; \\subsection&#123;模型改进&#125; \\section&#123;参考文献与引用&#125; 进行比赛 1. 读清题意 在本次比赛的过程中，我认为我们所犯的最严重的错误便是没有一开始确定自己理解的题意，当题目概念众多且陌生，条件纷纭变换，题目中的每一个关键的词都有可能影响对题目的判断。 负载能力、处理能力、阈值、任务属性消耗因子、风险因子。。。 最可怕的当是，三个人有三个对题目的理解，有三个不同的概念解释，这是恐怖的，这当然也是绝对不可行的。所以当题目发布后，第一时间组内统一题目理解，统一概念解释是非常有必要的。而在正式建模的过程中需要对题目概念理解做出改变的时候，再统一改变也不迟。 读清题目变量概念 负载能力、处理能力、阈值、任务属性消耗因子、风险因子、消减因子。。。 读清题目约束条件 “部分特殊任务”到达阈值时将对工作台负载能力造成一个常数的消减 读清题目所问问题 2. 查阅资料 除了扎实的数学功底外，数学建模同样需要的一项重要的能力便是信息检索和数据收集能力。反应到正式的比赛中，我认为能够查询到合适、相关的论文，也是致胜的一个关键。 论文搜集必备网站（UESTC 学生入口：） 国内： 中国知网 CNKI 万方数据知识服务平台 维普智立方知识资源服务平台 国外： Science Direct SCI 国外学位论文中国集团全文检索平台 ACM digital Library 非 UESTC 学生用户需要具体前往各大官方网站查阅相关资料 数学建模组内另建资料群显得尤为重要，发题后三位组员开始在各大资源网站疯狂寻找相关论文，并总结发送在资料群内，我相信肯定有一篇能为你的建模或算法提供灵感。 3. 抽象的模型 其实我一直把握不准一篇数学建模论文中抽象与具体的平衡关系，但我内心深处是向往抽象的数学符号，而不是一串串相对丑陋的具体的阿拉伯数字。但我确定的是，在建模的过程中，模型的建立与表达一定是用抽象的数学语言来展示。这除了需要我们了解众多模型的核心内涵，并通过题目条件套入其中外，针对这次比赛，我还想谈谈其他的细节。 模型假设 模型的建立往往少不了对一些相关条件的假设，而在这次与上次比赛中，条件的假设往往是我们所忽略的或者不重视的，条件统一的假设不仅有助于我们简化和统一模型条件，也让模型的建立更加合理。所以，需要我们尽可能的去考虑周全问题的所有条件，在必要之时，做出问题假设。 符号说明 抽象意味着将具体的量用抽象的符号来表示，而在变量纷纭复杂的情况下，如何用符号去代表变量，这是一个问题。 在比赛的过程中，模型建立时一个又一个变量，让我巴不得 a，b，c，d 这样轮流用下去，但这肯定是不合适的，我尝试在网上寻找答案，好像也没有所谓的规定，那该如何定义符号量的数学意义呢？我觉得需要正确把握人们的习惯性思维和对称性原则，比如 iii，jjj ，kkk 就是常用于角标量作为计数，而 μ\\muμ、λ\\lambdaλ ，等希腊字母常做系数常数。但更重要的是，自己定义的变量需要牢牢记在自己的脑海里，绝对不能在写作的过程中把他们搞得凌乱不堪。另外同一个符号不能拥有多层含义，符号含义应当区分开来并在正式建立模型之前交代清楚。 模型的检验与评价 模型的建立是一篇论文的高潮，但模型的检验和评价一样不能被忽略或轻视。本次比赛中，我们采用具体实例的模型检验 是否可行有待商榷 ，但据张神马之言，模型的检验需要大家公认的方法，具体的模型有着相应的检验方式。而在模型的评价过程中，一定要控制模型的优势多余模型的劣势，并且尽量说明模型的劣势为难以操控的不可抗因素。 4. 具体的编程 最快捷的编程方法是“Ctrl + C，Ctrl + A， Ctrl + V 一键三连！”。 第一时间寻找成品代码固然没错，但此次比赛也让我发现了这样做的一些弊端。首先，网络上的代码成品层次不齐，并不是每一个都很有效，代码中也会出现莫名其妙的 Bug ，最重要的是代码成品不一定适合你将要做的问题，这往往需要你做出改变。 值得反思的是，在第一天模型建立成功的晚上，我几乎浪费了一晚上的时间去寻找成品代码，却坚信题目要求难以编程实现。而在第二天早上，清醒头脑再看待这个问题时，发现其实编程实现是可行的并成功实现。—— 这就是一昧相信三连大法造成的惰性！ 有时真正难以实现的部分，可以通过两个方法去解决： 修改模型 牺牲功能 修改模型，需要与模型手商量，削弱部门模型条件，让编程实现变得可行。但在保证编程功能可以满足大部分条件的情况下，我认为完全可以牺牲编程代码的部分功能，因为美赛和校内赛是不要求提供代码的（doge）。当然，这适用于自建模型并自建实例，对于提供数据的赛题而言，还是需要尽可能实现代码功能。而我想强调的是，不要过于依赖各大网站的代码成品，而更应该自己去动手敲！ 5. 纠结的写作 在前期 LaTeX 的准备后，写作的过程只是一个仅需要关注写作内容而非写作格式的过程，而写作内容，我认为是纠结的过程，推敲 应当是常态。对于我们小组这样先分写再合并的过程，虽提高了写作效率，减轻了写作压力，但缺点也是显然易见的。首先是写作风格不统一，用词不统一。例如我习惯以“本文”代第一人称，而另外两位队友习惯以“我们”代第一人称。所以，这就需要合并文章时统一写作用词，统一写作风格。再精益求精一些，需要注意标点符号的统一与字母、符号、数字的准确。 演算寰宇方寸间，运筹万物帷幄中！ 小时候，总是调侃自己学的数学只能用在买菜上，而数学建模却真正是让你的数学知识转换为应对生活实际问题的过程，这个过程是美妙的，也是神奇的，希望各位数模人能一直保持对数模的这一份热爱和追求！！！","categories":[{"name":"数学建模","slug":"数学建模","permalink":"http://ckblogs.cn/categories/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"}],"tags":[{"name":"感念","slug":"感念","permalink":"http://ckblogs.cn/tags/%E6%84%9F%E5%BF%B5/"},{"name":"数学建模","slug":"数学建模","permalink":"http://ckblogs.cn/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"}]}],"categories":[{"name":"数学建模","slug":"数学建模","permalink":"http://ckblogs.cn/categories/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"},{"name":"生活","slug":"生活","permalink":"http://ckblogs.cn/categories/%E7%94%9F%E6%B4%BB/"},{"name":"技巧","slug":"技巧","permalink":"http://ckblogs.cn/categories/%E6%8A%80%E5%B7%A7/"},{"name":"其他","slug":"其他","permalink":"http://ckblogs.cn/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"数学建模","slug":"数学建模","permalink":"http://ckblogs.cn/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"},{"name":"Python","slug":"Python","permalink":"http://ckblogs.cn/tags/Python/"},{"name":"机器学习","slug":"机器学习","permalink":"http://ckblogs.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"小玩意","slug":"小玩意","permalink":"http://ckblogs.cn/tags/%E5%B0%8F%E7%8E%A9%E6%84%8F/"},{"name":"回溯法","slug":"回溯法","permalink":"http://ckblogs.cn/tags/%E5%9B%9E%E6%BA%AF%E6%B3%95/"},{"name":"生活","slug":"生活","permalink":"http://ckblogs.cn/tags/%E7%94%9F%E6%B4%BB/"},{"name":"感念","slug":"感念","permalink":"http://ckblogs.cn/tags/%E6%84%9F%E5%BF%B5/"},{"name":"技巧","slug":"技巧","permalink":"http://ckblogs.cn/tags/%E6%8A%80%E5%B7%A7/"},{"name":"浏览器","slug":"浏览器","permalink":"http://ckblogs.cn/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"name":"支教","slug":"支教","permalink":"http://ckblogs.cn/tags/%E6%94%AF%E6%95%99/"},{"name":"尝试","slug":"尝试","permalink":"http://ckblogs.cn/tags/%E5%B0%9D%E8%AF%95/"}]}